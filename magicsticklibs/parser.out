Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    COMMENT
    QUOTE_1
    QUOTE_2
    XOR

Grammar

Rule 0     S' -> start
Rule 1     start -> MAIN COLON body
Rule 2     body -> goto body
Rule 3     body -> unset body
Rule 4     body -> print body
Rule 5     body -> exit body
Rule 6     body -> tag body
Rule 7     body -> if body
Rule 8     body -> assign body
Rule 9     body -> declaration body
Rule 10    body -> empty
Rule 11    goto -> GOTO NAME SEMICOLON
Rule 12    unset -> UNSET L_PAR TVAR R_PAR SEMICOLON
Rule 13    unset -> UNSET L_PAR AVAR R_PAR SEMICOLON
Rule 14    unset -> UNSET L_PAR VVAR R_PAR SEMICOLON
Rule 15    unset -> UNSET L_PAR SVAR R_PAR SEMICOLON
Rule 16    unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON
Rule 17    unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON
Rule 18    print -> PRINT L_PAR TVAR R_PAR SEMICOLON
Rule 19    print -> PRINT L_PAR AVAR R_PAR SEMICOLON
Rule 20    print -> PRINT L_PAR VVAR R_PAR SEMICOLON
Rule 21    print -> PRINT L_PAR SVAR R_PAR SEMICOLON
Rule 22    print -> PRINT L_PAR SPVAR R_PAR SEMICOLON
Rule 23    print -> PRINT L_PAR RAVAR R_PAR SEMICOLON
Rule 24    print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 25    print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 26    print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 27    print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 28    print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 29    print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 30    print -> PRINT L_PAR STRING R_PAR SEMICOLON
Rule 31    exit -> EXIT SEMICOLON
Rule 32    tag -> NAME COLON
Rule 33    if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON
Rule 34    condition -> condition AND condition
Rule 35    condition -> condition OR condition
Rule 36    condition -> NOT condition
Rule 37    condition -> relational
Rule 38    relational -> arithmetic EQUAL arithmetic
Rule 39    relational -> arithmetic NOT_EQUAL arithmetic
Rule 40    relational -> arithmetic GREATER arithmetic
Rule 41    relational -> arithmetic LESS arithmetic
Rule 42    relational -> arithmetic GREATER_EQUAL arithmetic
Rule 43    relational -> arithmetic LESS_EQUAL arithmetic
Rule 44    relational -> arithmetic
Rule 45    arithmetic -> arithmetic PLUS arithmetic
Rule 46    arithmetic -> arithmetic MINUS arithmetic
Rule 47    arithmetic -> arithmetic MULTIPLY arithmetic
Rule 48    arithmetic -> arithmetic DIVIDE arithmetic
Rule 49    arithmetic -> arithmetic REMAINDER arithmetic
Rule 50    arithmetic -> INTEGER
Rule 51    arithmetic -> DECIMAL
Rule 52    arithmetic -> STRING
Rule 53    arithmetic -> var
Rule 54    arithmetic -> array_access
Rule 55    var -> TVAR
Rule 56    var -> AVAR
Rule 57    var -> VVAR
Rule 58    var -> SVAR
Rule 59    var -> RAVAR
Rule 60    var -> SPVAR
Rule 61    array_access -> <empty>
Rule 62    assign -> TVAR ASSIGN condition SEMICOLON
Rule 63    assign -> AVAR ASSIGN condition SEMICOLON
Rule 64    assign -> VVAR ASSIGN condition SEMICOLON
Rule 65    assign -> SVAR ASSIGN condition SEMICOLON
Rule 66    assign -> TVAR ASSIGN conversion SEMICOLON
Rule 67    assign -> AVAR ASSIGN conversion SEMICOLON
Rule 68    assign -> VVAR ASSIGN conversion SEMICOLON
Rule 69    assign -> SVAR ASSIGN conversion SEMICOLON
Rule 70    assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 71    assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 72    assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 73    assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 74    assign -> TVAR ASSIGN bitwise SEMICOLON
Rule 75    assign -> AVAR ASSIGN bitwise SEMICOLON
Rule 76    assign -> VVAR ASSIGN bitwise SEMICOLON
Rule 77    assign -> SVAR ASSIGN bitwise SEMICOLON
Rule 78    assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 79    assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 80    assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 81    assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 82    assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 83    assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 84    assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
Rule 85    assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
Rule 86    assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
Rule 87    assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
Rule 88    bitwise -> var AND_B var
Rule 89    bitwise -> var OR_B var
Rule 90    bitwise -> var XOR_B var
Rule 91    bitwise -> var SHIFT_L var
Rule 92    bitwise -> var SHIFT_R var
Rule 93    bitwise -> NOT_B TVAR
Rule 94    bitwise -> NOT_B AVAR
Rule 95    bitwise -> NOT_B VVAR
Rule 96    bitwise -> NOT_B SVAR
Rule 97    conversion -> L_PAR type R_PAR var
Rule 98    type -> INT
Rule 99    type -> FLOAT
Rule 100   type -> CHAR
Rule 101   declaration -> var
Rule 102   declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 103   declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 104   declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 105   declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 106   declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 107   declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 108   declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 109   declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 110   declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 111   declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 112   declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 113   declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 114   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 84 85 86 87
AND                  : 34
AND_B                : 88
ARRAY                : 102 103 104 105 106 107
ASSIGN               : 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 102 103 104 105 106 107
AVAR                 : 13 19 25 56 63 67 71 75 79 85 94 103 109
CHAR                 : 100
COLON                : 1 32
COMMA                : 
COMMENT              : 
DECIMAL              : 51
DIVIDE               : 48
EQUAL                : 38
EXIT                 : 31
FLOAT                : 99
GOTO                 : 11 33
GREATER              : 40
GREATER_EQUAL        : 42
IF                   : 33
INT                  : 98
INTEGER              : 50
LESS                 : 41
LESS_EQUAL           : 43
L_BRACKET            : 24 25 26 27 28 29 78 79 80 81 82 83 108 109 110 111 112 113
L_PAR                : 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 33 70 71 72 73 84 85 86 87 97 102 103 104 105 106 107
MAIN                 : 1
MINUS                : 46
MULTIPLY             : 47
NAME                 : 11 32 33
NOT                  : 36
NOT_B                : 93 94 95 96
NOT_EQUAL            : 39
OR                   : 35
OR_B                 : 89
PLUS                 : 45
PRINT                : 18 19 20 21 22 23 24 25 26 27 28 29 30
QUOTE_1              : 
QUOTE_2              : 
RAVAR                : 17 23 29 59 83 107 113
READ                 : 70 71 72 73
REMAINDER            : 49
R_BRACKET            : 24 25 26 27 28 29 78 79 80 81 82 83 108 109 110 111 112 113
R_PAR                : 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 33 70 71 72 73 84 85 86 87 97 102 103 104 105 106 107
SEMICOLON            : 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 102 103 104 105 106 107 108 109 110 111 112 113
SHIFT_L              : 91
SHIFT_R              : 92
SPVAR                : 16 22 28 60 82 106 112
STRING               : 30 52
SVAR                 : 15 21 27 58 65 69 73 77 81 87 96 105 111
TVAR                 : 12 18 24 55 62 66 70 74 78 84 93 102 108
UNSET                : 12 13 14 15 16 17
VVAR                 : 14 20 26 57 64 68 72 76 80 86 95 104 110
XOR                  : 
XOR_B                : 90
error                : 

Nonterminals, with rules where they appear

arithmetic           : 24 25 26 27 28 29 38 38 39 39 40 40 41 41 42 42 43 43 44 45 45 46 46 47 47 48 48 49 49 78 79 80 81 82 83 108 109 110 111 112 113
array_access         : 54
assign               : 8
bitwise              : 74 75 76 77
body                 : 1 2 3 4 5 6 7 8 9
condition            : 33 34 34 35 35 36 62 63 64 65 78 79 80 81 82 83
conversion           : 66 67 68 69
declaration          : 9
empty                : 10
exit                 : 5
goto                 : 2
if                   : 7
print                : 4
relational           : 37
start                : 0
tag                  : 6
type                 : 97
unset                : 3
var                  : 53 84 85 86 87 88 88 89 89 90 90 91 91 92 92 97 101

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . MAIN COLON body

    MAIN            shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> MAIN . COLON body

    COLON           shift and go to state 3


state 3

    (1) start -> MAIN COLON . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    body                           shift and go to state 4
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 4

    (1) start -> MAIN COLON body .

    $end            reduce using rule 1 (start -> MAIN COLON body .)


state 5

    (2) body -> goto . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    goto                           shift and go to state 5
    body                           shift and go to state 27
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 6

    (3) body -> unset . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    unset                          shift and go to state 6
    body                           shift and go to state 28
    goto                           shift and go to state 5
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 7

    (4) body -> print . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    print                          shift and go to state 7
    body                           shift and go to state 29
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 8

    (5) body -> exit . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    exit                           shift and go to state 8
    body                           shift and go to state 30
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 9

    (6) body -> tag . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    tag                            shift and go to state 9
    body                           shift and go to state 31
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 10

    (7) body -> if . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    if                             shift and go to state 10
    body                           shift and go to state 32
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 11

    (8) body -> assign . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    assign                         shift and go to state 11
    body                           shift and go to state 33
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 12

    (9) body -> declaration . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> . PRINT L_PAR STRING R_PAR SEMICOLON
    (31) exit -> . EXIT SEMICOLON
    (32) tag -> . NAME COLON
    (33) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (62) assign -> . TVAR ASSIGN condition SEMICOLON
    (63) assign -> . AVAR ASSIGN condition SEMICOLON
    (64) assign -> . VVAR ASSIGN condition SEMICOLON
    (65) assign -> . SVAR ASSIGN condition SEMICOLON
    (66) assign -> . TVAR ASSIGN conversion SEMICOLON
    (67) assign -> . AVAR ASSIGN conversion SEMICOLON
    (68) assign -> . VVAR ASSIGN conversion SEMICOLON
    (69) assign -> . SVAR ASSIGN conversion SEMICOLON
    (70) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (78) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (83) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> . TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (85) assign -> . AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (86) assign -> . VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (87) assign -> . SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (101) declaration -> . var
    (102) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (110) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (111) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (112) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (113) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (114) empty -> .
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 114 (empty -> .)

    declaration                    shift and go to state 12
    body                           shift and go to state 34
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 13

    (10) body -> empty .

    $end            reduce using rule 10 (body -> empty .)


state 14

    (11) goto -> GOTO . NAME SEMICOLON

    NAME            shift and go to state 35


state 15

    (32) tag -> NAME . COLON

    COLON           shift and go to state 36


state 16

    (12) unset -> UNSET . L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> UNSET . L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> UNSET . L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> UNSET . L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> UNSET . L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> UNSET . L_PAR RAVAR R_PAR SEMICOLON

    L_PAR           shift and go to state 37


state 17

    (62) assign -> TVAR . ASSIGN condition SEMICOLON
    (66) assign -> TVAR . ASSIGN conversion SEMICOLON
    (70) assign -> TVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> TVAR . ASSIGN bitwise SEMICOLON
    (78) assign -> TVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (84) assign -> TVAR . ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (102) declaration -> TVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> TVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (55) var -> TVAR .

    ASSIGN          shift and go to state 38
    L_BRACKET       shift and go to state 39
    GOTO            reduce using rule 55 (var -> TVAR .)
    UNSET           reduce using rule 55 (var -> TVAR .)
    PRINT           reduce using rule 55 (var -> TVAR .)
    EXIT            reduce using rule 55 (var -> TVAR .)
    NAME            reduce using rule 55 (var -> TVAR .)
    IF              reduce using rule 55 (var -> TVAR .)
    TVAR            reduce using rule 55 (var -> TVAR .)
    AVAR            reduce using rule 55 (var -> TVAR .)
    VVAR            reduce using rule 55 (var -> TVAR .)
    SVAR            reduce using rule 55 (var -> TVAR .)
    SPVAR           reduce using rule 55 (var -> TVAR .)
    RAVAR           reduce using rule 55 (var -> TVAR .)
    $end            reduce using rule 55 (var -> TVAR .)


state 18

    (63) assign -> AVAR . ASSIGN condition SEMICOLON
    (67) assign -> AVAR . ASSIGN conversion SEMICOLON
    (71) assign -> AVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (75) assign -> AVAR . ASSIGN bitwise SEMICOLON
    (79) assign -> AVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (85) assign -> AVAR . ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (103) declaration -> AVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (109) declaration -> AVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (56) var -> AVAR .

    ASSIGN          shift and go to state 40
    L_BRACKET       shift and go to state 41
    GOTO            reduce using rule 56 (var -> AVAR .)
    UNSET           reduce using rule 56 (var -> AVAR .)
    PRINT           reduce using rule 56 (var -> AVAR .)
    EXIT            reduce using rule 56 (var -> AVAR .)
    NAME            reduce using rule 56 (var -> AVAR .)
    IF              reduce using rule 56 (var -> AVAR .)
    TVAR            reduce using rule 56 (var -> AVAR .)
    AVAR            reduce using rule 56 (var -> AVAR .)
    VVAR            reduce using rule 56 (var -> AVAR .)
    SVAR            reduce using rule 56 (var -> AVAR .)
    SPVAR           reduce using rule 56 (var -> AVAR .)
    RAVAR           reduce using rule 56 (var -> AVAR .)
    $end            reduce using rule 56 (var -> AVAR .)


state 19

    (64) assign -> VVAR . ASSIGN condition SEMICOLON
    (68) assign -> VVAR . ASSIGN conversion SEMICOLON
    (72) assign -> VVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (76) assign -> VVAR . ASSIGN bitwise SEMICOLON
    (80) assign -> VVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (86) assign -> VVAR . ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (104) declaration -> VVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (110) declaration -> VVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (57) var -> VVAR .

    ASSIGN          shift and go to state 42
    L_BRACKET       shift and go to state 43
    GOTO            reduce using rule 57 (var -> VVAR .)
    UNSET           reduce using rule 57 (var -> VVAR .)
    PRINT           reduce using rule 57 (var -> VVAR .)
    EXIT            reduce using rule 57 (var -> VVAR .)
    NAME            reduce using rule 57 (var -> VVAR .)
    IF              reduce using rule 57 (var -> VVAR .)
    TVAR            reduce using rule 57 (var -> VVAR .)
    AVAR            reduce using rule 57 (var -> VVAR .)
    VVAR            reduce using rule 57 (var -> VVAR .)
    SVAR            reduce using rule 57 (var -> VVAR .)
    SPVAR           reduce using rule 57 (var -> VVAR .)
    RAVAR           reduce using rule 57 (var -> VVAR .)
    $end            reduce using rule 57 (var -> VVAR .)


state 20

    (65) assign -> SVAR . ASSIGN condition SEMICOLON
    (69) assign -> SVAR . ASSIGN conversion SEMICOLON
    (73) assign -> SVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (77) assign -> SVAR . ASSIGN bitwise SEMICOLON
    (81) assign -> SVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (87) assign -> SVAR . ASSIGN ABS L_PAR var R_PAR SEMICOLON
    (105) declaration -> SVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (111) declaration -> SVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (58) var -> SVAR .

    ASSIGN          shift and go to state 44
    L_BRACKET       shift and go to state 45
    GOTO            reduce using rule 58 (var -> SVAR .)
    UNSET           reduce using rule 58 (var -> SVAR .)
    PRINT           reduce using rule 58 (var -> SVAR .)
    EXIT            reduce using rule 58 (var -> SVAR .)
    NAME            reduce using rule 58 (var -> SVAR .)
    IF              reduce using rule 58 (var -> SVAR .)
    TVAR            reduce using rule 58 (var -> SVAR .)
    AVAR            reduce using rule 58 (var -> SVAR .)
    VVAR            reduce using rule 58 (var -> SVAR .)
    SVAR            reduce using rule 58 (var -> SVAR .)
    SPVAR           reduce using rule 58 (var -> SVAR .)
    RAVAR           reduce using rule 58 (var -> SVAR .)
    $end            reduce using rule 58 (var -> SVAR .)


state 21

    (82) assign -> SPVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (106) declaration -> SPVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (112) declaration -> SPVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (60) var -> SPVAR .

    L_BRACKET       shift and go to state 46
    ASSIGN          shift and go to state 47
    GOTO            reduce using rule 60 (var -> SPVAR .)
    UNSET           reduce using rule 60 (var -> SPVAR .)
    PRINT           reduce using rule 60 (var -> SPVAR .)
    EXIT            reduce using rule 60 (var -> SPVAR .)
    NAME            reduce using rule 60 (var -> SPVAR .)
    IF              reduce using rule 60 (var -> SPVAR .)
    TVAR            reduce using rule 60 (var -> SPVAR .)
    AVAR            reduce using rule 60 (var -> SPVAR .)
    VVAR            reduce using rule 60 (var -> SPVAR .)
    SVAR            reduce using rule 60 (var -> SPVAR .)
    SPVAR           reduce using rule 60 (var -> SPVAR .)
    RAVAR           reduce using rule 60 (var -> SPVAR .)
    $end            reduce using rule 60 (var -> SPVAR .)


state 22

    (83) assign -> RAVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (107) declaration -> RAVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (113) declaration -> RAVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (59) var -> RAVAR .

    L_BRACKET       shift and go to state 48
    ASSIGN          shift and go to state 49
    GOTO            reduce using rule 59 (var -> RAVAR .)
    UNSET           reduce using rule 59 (var -> RAVAR .)
    PRINT           reduce using rule 59 (var -> RAVAR .)
    EXIT            reduce using rule 59 (var -> RAVAR .)
    NAME            reduce using rule 59 (var -> RAVAR .)
    IF              reduce using rule 59 (var -> RAVAR .)
    TVAR            reduce using rule 59 (var -> RAVAR .)
    AVAR            reduce using rule 59 (var -> RAVAR .)
    VVAR            reduce using rule 59 (var -> RAVAR .)
    SVAR            reduce using rule 59 (var -> RAVAR .)
    SPVAR           reduce using rule 59 (var -> RAVAR .)
    RAVAR           reduce using rule 59 (var -> RAVAR .)
    $end            reduce using rule 59 (var -> RAVAR .)


state 23

    (18) print -> PRINT . L_PAR TVAR R_PAR SEMICOLON
    (19) print -> PRINT . L_PAR AVAR R_PAR SEMICOLON
    (20) print -> PRINT . L_PAR VVAR R_PAR SEMICOLON
    (21) print -> PRINT . L_PAR SVAR R_PAR SEMICOLON
    (22) print -> PRINT . L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> PRINT . L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> PRINT . L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> PRINT . L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> PRINT . L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> PRINT . L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> PRINT . L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> PRINT . L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> PRINT . L_PAR STRING R_PAR SEMICOLON

    L_PAR           shift and go to state 50


state 24

    (31) exit -> EXIT . SEMICOLON

    SEMICOLON       shift and go to state 51


state 25

    (33) if -> IF . L_PAR condition R_PAR GOTO NAME SEMICOLON

    L_PAR           shift and go to state 52


state 26

    (101) declaration -> var .

    GOTO            reduce using rule 101 (declaration -> var .)
    UNSET           reduce using rule 101 (declaration -> var .)
    PRINT           reduce using rule 101 (declaration -> var .)
    EXIT            reduce using rule 101 (declaration -> var .)
    NAME            reduce using rule 101 (declaration -> var .)
    IF              reduce using rule 101 (declaration -> var .)
    TVAR            reduce using rule 101 (declaration -> var .)
    AVAR            reduce using rule 101 (declaration -> var .)
    VVAR            reduce using rule 101 (declaration -> var .)
    SVAR            reduce using rule 101 (declaration -> var .)
    SPVAR           reduce using rule 101 (declaration -> var .)
    RAVAR           reduce using rule 101 (declaration -> var .)
    $end            reduce using rule 101 (declaration -> var .)


state 27

    (2) body -> goto body .

    $end            reduce using rule 2 (body -> goto body .)


state 28

    (3) body -> unset body .

    $end            reduce using rule 3 (body -> unset body .)


state 29

    (4) body -> print body .

    $end            reduce using rule 4 (body -> print body .)


state 30

    (5) body -> exit body .

    $end            reduce using rule 5 (body -> exit body .)


state 31

    (6) body -> tag body .

    $end            reduce using rule 6 (body -> tag body .)


state 32

    (7) body -> if body .

    $end            reduce using rule 7 (body -> if body .)


state 33

    (8) body -> assign body .

    $end            reduce using rule 8 (body -> assign body .)


state 34

    (9) body -> declaration body .

    $end            reduce using rule 9 (body -> declaration body .)


state 35

    (11) goto -> GOTO NAME . SEMICOLON

    SEMICOLON       shift and go to state 53


state 36

    (32) tag -> NAME COLON .

    GOTO            reduce using rule 32 (tag -> NAME COLON .)
    UNSET           reduce using rule 32 (tag -> NAME COLON .)
    PRINT           reduce using rule 32 (tag -> NAME COLON .)
    EXIT            reduce using rule 32 (tag -> NAME COLON .)
    NAME            reduce using rule 32 (tag -> NAME COLON .)
    IF              reduce using rule 32 (tag -> NAME COLON .)
    TVAR            reduce using rule 32 (tag -> NAME COLON .)
    AVAR            reduce using rule 32 (tag -> NAME COLON .)
    VVAR            reduce using rule 32 (tag -> NAME COLON .)
    SVAR            reduce using rule 32 (tag -> NAME COLON .)
    SPVAR           reduce using rule 32 (tag -> NAME COLON .)
    RAVAR           reduce using rule 32 (tag -> NAME COLON .)
    $end            reduce using rule 32 (tag -> NAME COLON .)


state 37

    (12) unset -> UNSET L_PAR . TVAR R_PAR SEMICOLON
    (13) unset -> UNSET L_PAR . AVAR R_PAR SEMICOLON
    (14) unset -> UNSET L_PAR . VVAR R_PAR SEMICOLON
    (15) unset -> UNSET L_PAR . SVAR R_PAR SEMICOLON
    (16) unset -> UNSET L_PAR . SPVAR R_PAR SEMICOLON
    (17) unset -> UNSET L_PAR . RAVAR R_PAR SEMICOLON

    TVAR            shift and go to state 54
    AVAR            shift and go to state 55
    VVAR            shift and go to state 56
    SVAR            shift and go to state 57
    SPVAR           shift and go to state 58
    RAVAR           shift and go to state 59


state 38

    (62) assign -> TVAR ASSIGN . condition SEMICOLON
    (66) assign -> TVAR ASSIGN . conversion SEMICOLON
    (70) assign -> TVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (74) assign -> TVAR ASSIGN . bitwise SEMICOLON
    (84) assign -> TVAR ASSIGN . ABS L_PAR var R_PAR SEMICOLON
    (102) declaration -> TVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (97) conversion -> . L_PAR type R_PAR var
    (88) bitwise -> . var AND_B var
    (89) bitwise -> . var OR_B var
    (90) bitwise -> . var XOR_B var
    (91) bitwise -> . var SHIFT_L var
    (92) bitwise -> . var SHIFT_R var
    (93) bitwise -> . NOT_B TVAR
    (94) bitwise -> . NOT_B AVAR
    (95) bitwise -> . NOT_B VVAR
    (96) bitwise -> . NOT_B SVAR
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (61) array_access -> .

    READ            shift and go to state 63
    ABS             shift and go to state 66
    ARRAY           shift and go to state 68
    NOT             shift and go to state 69
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 71
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 61
    conversion                     shift and go to state 62
    bitwise                        shift and go to state 65
    var                            shift and go to state 67
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    array_access                   shift and go to state 81

state 39

    (78) assign -> TVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (108) declaration -> TVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 82
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 40

    (63) assign -> AVAR ASSIGN . condition SEMICOLON
    (67) assign -> AVAR ASSIGN . conversion SEMICOLON
    (71) assign -> AVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (75) assign -> AVAR ASSIGN . bitwise SEMICOLON
    (85) assign -> AVAR ASSIGN . ABS L_PAR var R_PAR SEMICOLON
    (103) declaration -> AVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (97) conversion -> . L_PAR type R_PAR var
    (88) bitwise -> . var AND_B var
    (89) bitwise -> . var OR_B var
    (90) bitwise -> . var XOR_B var
    (91) bitwise -> . var SHIFT_L var
    (92) bitwise -> . var SHIFT_R var
    (93) bitwise -> . NOT_B TVAR
    (94) bitwise -> . NOT_B AVAR
    (95) bitwise -> . NOT_B VVAR
    (96) bitwise -> . NOT_B SVAR
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (61) array_access -> .

    READ            shift and go to state 86
    ABS             shift and go to state 88
    ARRAY           shift and go to state 89
    NOT             shift and go to state 69
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 71
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 84
    conversion                     shift and go to state 85
    bitwise                        shift and go to state 87
    var                            shift and go to state 67
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    array_access                   shift and go to state 81

state 41

    (79) assign -> AVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (109) declaration -> AVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 90
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 42

    (64) assign -> VVAR ASSIGN . condition SEMICOLON
    (68) assign -> VVAR ASSIGN . conversion SEMICOLON
    (72) assign -> VVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (76) assign -> VVAR ASSIGN . bitwise SEMICOLON
    (86) assign -> VVAR ASSIGN . ABS L_PAR var R_PAR SEMICOLON
    (104) declaration -> VVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (97) conversion -> . L_PAR type R_PAR var
    (88) bitwise -> . var AND_B var
    (89) bitwise -> . var OR_B var
    (90) bitwise -> . var XOR_B var
    (91) bitwise -> . var SHIFT_L var
    (92) bitwise -> . var SHIFT_R var
    (93) bitwise -> . NOT_B TVAR
    (94) bitwise -> . NOT_B AVAR
    (95) bitwise -> . NOT_B VVAR
    (96) bitwise -> . NOT_B SVAR
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (61) array_access -> .

    READ            shift and go to state 93
    ABS             shift and go to state 95
    ARRAY           shift and go to state 96
    NOT             shift and go to state 69
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 71
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 91
    conversion                     shift and go to state 92
    bitwise                        shift and go to state 94
    var                            shift and go to state 67
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    array_access                   shift and go to state 81

state 43

    (80) assign -> VVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (110) declaration -> VVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 97
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 44

    (65) assign -> SVAR ASSIGN . condition SEMICOLON
    (69) assign -> SVAR ASSIGN . conversion SEMICOLON
    (73) assign -> SVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (77) assign -> SVAR ASSIGN . bitwise SEMICOLON
    (87) assign -> SVAR ASSIGN . ABS L_PAR var R_PAR SEMICOLON
    (105) declaration -> SVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (97) conversion -> . L_PAR type R_PAR var
    (88) bitwise -> . var AND_B var
    (89) bitwise -> . var OR_B var
    (90) bitwise -> . var XOR_B var
    (91) bitwise -> . var SHIFT_L var
    (92) bitwise -> . var SHIFT_R var
    (93) bitwise -> . NOT_B TVAR
    (94) bitwise -> . NOT_B AVAR
    (95) bitwise -> . NOT_B VVAR
    (96) bitwise -> . NOT_B SVAR
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (61) array_access -> .

    READ            shift and go to state 100
    ABS             shift and go to state 102
    ARRAY           shift and go to state 103
    NOT             shift and go to state 69
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 71
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 98
    conversion                     shift and go to state 99
    bitwise                        shift and go to state 101
    var                            shift and go to state 67
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    array_access                   shift and go to state 81

state 45

    (81) assign -> SVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (111) declaration -> SVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 104
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 46

    (82) assign -> SPVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (112) declaration -> SPVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 105
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 47

    (106) declaration -> SPVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON

    ARRAY           shift and go to state 106


state 48

    (83) assign -> RAVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (113) declaration -> RAVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 107
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 49

    (107) declaration -> RAVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON

    ARRAY           shift and go to state 108


state 50

    (18) print -> PRINT L_PAR . TVAR R_PAR SEMICOLON
    (19) print -> PRINT L_PAR . AVAR R_PAR SEMICOLON
    (20) print -> PRINT L_PAR . VVAR R_PAR SEMICOLON
    (21) print -> PRINT L_PAR . SVAR R_PAR SEMICOLON
    (22) print -> PRINT L_PAR . SPVAR R_PAR SEMICOLON
    (23) print -> PRINT L_PAR . RAVAR R_PAR SEMICOLON
    (24) print -> PRINT L_PAR . TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> PRINT L_PAR . AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> PRINT L_PAR . VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> PRINT L_PAR . SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> PRINT L_PAR . SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> PRINT L_PAR . RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) print -> PRINT L_PAR . STRING R_PAR SEMICOLON

    TVAR            shift and go to state 109
    AVAR            shift and go to state 110
    VVAR            shift and go to state 111
    SVAR            shift and go to state 112
    SPVAR           shift and go to state 113
    RAVAR           shift and go to state 114
    STRING          shift and go to state 115


state 51

    (31) exit -> EXIT SEMICOLON .

    GOTO            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    UNSET           reduce using rule 31 (exit -> EXIT SEMICOLON .)
    PRINT           reduce using rule 31 (exit -> EXIT SEMICOLON .)
    EXIT            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    NAME            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    IF              reduce using rule 31 (exit -> EXIT SEMICOLON .)
    TVAR            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    AVAR            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    VVAR            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    SVAR            reduce using rule 31 (exit -> EXIT SEMICOLON .)
    SPVAR           reduce using rule 31 (exit -> EXIT SEMICOLON .)
    RAVAR           reduce using rule 31 (exit -> EXIT SEMICOLON .)
    $end            reduce using rule 31 (exit -> EXIT SEMICOLON .)


state 52

    (33) if -> IF L_PAR . condition R_PAR GOTO NAME SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 116
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 53

    (11) goto -> GOTO NAME SEMICOLON .

    GOTO            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    UNSET           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    PRINT           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    EXIT            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    NAME            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    IF              reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    TVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    AVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    VVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    SVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    SPVAR           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    RAVAR           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    $end            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)


state 54

    (12) unset -> UNSET L_PAR TVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 117


state 55

    (13) unset -> UNSET L_PAR AVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 118


state 56

    (14) unset -> UNSET L_PAR VVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 119


state 57

    (15) unset -> UNSET L_PAR SVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 120


state 58

    (16) unset -> UNSET L_PAR SPVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 121


state 59

    (17) unset -> UNSET L_PAR RAVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 122


state 60

    (55) var -> TVAR .

    AND_B           reduce using rule 55 (var -> TVAR .)
    OR_B            reduce using rule 55 (var -> TVAR .)
    XOR_B           reduce using rule 55 (var -> TVAR .)
    SHIFT_L         reduce using rule 55 (var -> TVAR .)
    SHIFT_R         reduce using rule 55 (var -> TVAR .)
    EQUAL           reduce using rule 55 (var -> TVAR .)
    NOT_EQUAL       reduce using rule 55 (var -> TVAR .)
    GREATER         reduce using rule 55 (var -> TVAR .)
    LESS            reduce using rule 55 (var -> TVAR .)
    GREATER_EQUAL   reduce using rule 55 (var -> TVAR .)
    LESS_EQUAL      reduce using rule 55 (var -> TVAR .)
    PLUS            reduce using rule 55 (var -> TVAR .)
    MINUS           reduce using rule 55 (var -> TVAR .)
    MULTIPLY        reduce using rule 55 (var -> TVAR .)
    DIVIDE          reduce using rule 55 (var -> TVAR .)
    REMAINDER       reduce using rule 55 (var -> TVAR .)
    SEMICOLON       reduce using rule 55 (var -> TVAR .)
    AND             reduce using rule 55 (var -> TVAR .)
    OR              reduce using rule 55 (var -> TVAR .)
    R_BRACKET       reduce using rule 55 (var -> TVAR .)
    R_PAR           reduce using rule 55 (var -> TVAR .)


state 61

    (62) assign -> TVAR ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 123
    AND             shift and go to state 124
    OR              shift and go to state 125


state 62

    (66) assign -> TVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 126


state 63

    (70) assign -> TVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 127


state 64

    (97) conversion -> L_PAR . type R_PAR var
    (98) type -> . INT
    (99) type -> . FLOAT
    (100) type -> . CHAR

    INT             shift and go to state 129
    FLOAT           shift and go to state 130
    CHAR            shift and go to state 131

    type                           shift and go to state 128

state 65

    (74) assign -> TVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 132


state 66

    (84) assign -> TVAR ASSIGN ABS . L_PAR var R_PAR SEMICOLON

    L_PAR           shift and go to state 133


state 67

    (88) bitwise -> var . AND_B var
    (89) bitwise -> var . OR_B var
    (90) bitwise -> var . XOR_B var
    (91) bitwise -> var . SHIFT_L var
    (92) bitwise -> var . SHIFT_R var
    (53) arithmetic -> var .

    AND_B           shift and go to state 134
    OR_B            shift and go to state 135
    XOR_B           shift and go to state 136
    SHIFT_L         shift and go to state 137
    SHIFT_R         shift and go to state 138
    EQUAL           reduce using rule 53 (arithmetic -> var .)
    NOT_EQUAL       reduce using rule 53 (arithmetic -> var .)
    GREATER         reduce using rule 53 (arithmetic -> var .)
    LESS            reduce using rule 53 (arithmetic -> var .)
    GREATER_EQUAL   reduce using rule 53 (arithmetic -> var .)
    LESS_EQUAL      reduce using rule 53 (arithmetic -> var .)
    PLUS            reduce using rule 53 (arithmetic -> var .)
    MINUS           reduce using rule 53 (arithmetic -> var .)
    MULTIPLY        reduce using rule 53 (arithmetic -> var .)
    DIVIDE          reduce using rule 53 (arithmetic -> var .)
    REMAINDER       reduce using rule 53 (arithmetic -> var .)
    SEMICOLON       reduce using rule 53 (arithmetic -> var .)
    AND             reduce using rule 53 (arithmetic -> var .)
    OR              reduce using rule 53 (arithmetic -> var .)


state 68

    (102) declaration -> TVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 139


state 69

    (36) condition -> NOT . condition
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 140
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 70

    (37) condition -> relational .

    SEMICOLON       reduce using rule 37 (condition -> relational .)
    AND             reduce using rule 37 (condition -> relational .)
    OR              reduce using rule 37 (condition -> relational .)
    R_PAR           reduce using rule 37 (condition -> relational .)


state 71

    (93) bitwise -> NOT_B . TVAR
    (94) bitwise -> NOT_B . AVAR
    (95) bitwise -> NOT_B . VVAR
    (96) bitwise -> NOT_B . SVAR

    TVAR            shift and go to state 141
    AVAR            shift and go to state 142
    VVAR            shift and go to state 143
    SVAR            shift and go to state 144


state 72

    (56) var -> AVAR .

    AND_B           reduce using rule 56 (var -> AVAR .)
    OR_B            reduce using rule 56 (var -> AVAR .)
    XOR_B           reduce using rule 56 (var -> AVAR .)
    SHIFT_L         reduce using rule 56 (var -> AVAR .)
    SHIFT_R         reduce using rule 56 (var -> AVAR .)
    EQUAL           reduce using rule 56 (var -> AVAR .)
    NOT_EQUAL       reduce using rule 56 (var -> AVAR .)
    GREATER         reduce using rule 56 (var -> AVAR .)
    LESS            reduce using rule 56 (var -> AVAR .)
    GREATER_EQUAL   reduce using rule 56 (var -> AVAR .)
    LESS_EQUAL      reduce using rule 56 (var -> AVAR .)
    PLUS            reduce using rule 56 (var -> AVAR .)
    MINUS           reduce using rule 56 (var -> AVAR .)
    MULTIPLY        reduce using rule 56 (var -> AVAR .)
    DIVIDE          reduce using rule 56 (var -> AVAR .)
    REMAINDER       reduce using rule 56 (var -> AVAR .)
    SEMICOLON       reduce using rule 56 (var -> AVAR .)
    AND             reduce using rule 56 (var -> AVAR .)
    OR              reduce using rule 56 (var -> AVAR .)
    R_BRACKET       reduce using rule 56 (var -> AVAR .)
    R_PAR           reduce using rule 56 (var -> AVAR .)


state 73

    (57) var -> VVAR .

    AND_B           reduce using rule 57 (var -> VVAR .)
    OR_B            reduce using rule 57 (var -> VVAR .)
    XOR_B           reduce using rule 57 (var -> VVAR .)
    SHIFT_L         reduce using rule 57 (var -> VVAR .)
    SHIFT_R         reduce using rule 57 (var -> VVAR .)
    EQUAL           reduce using rule 57 (var -> VVAR .)
    NOT_EQUAL       reduce using rule 57 (var -> VVAR .)
    GREATER         reduce using rule 57 (var -> VVAR .)
    LESS            reduce using rule 57 (var -> VVAR .)
    GREATER_EQUAL   reduce using rule 57 (var -> VVAR .)
    LESS_EQUAL      reduce using rule 57 (var -> VVAR .)
    PLUS            reduce using rule 57 (var -> VVAR .)
    MINUS           reduce using rule 57 (var -> VVAR .)
    MULTIPLY        reduce using rule 57 (var -> VVAR .)
    DIVIDE          reduce using rule 57 (var -> VVAR .)
    REMAINDER       reduce using rule 57 (var -> VVAR .)
    SEMICOLON       reduce using rule 57 (var -> VVAR .)
    AND             reduce using rule 57 (var -> VVAR .)
    OR              reduce using rule 57 (var -> VVAR .)
    R_BRACKET       reduce using rule 57 (var -> VVAR .)
    R_PAR           reduce using rule 57 (var -> VVAR .)


state 74

    (58) var -> SVAR .

    AND_B           reduce using rule 58 (var -> SVAR .)
    OR_B            reduce using rule 58 (var -> SVAR .)
    XOR_B           reduce using rule 58 (var -> SVAR .)
    SHIFT_L         reduce using rule 58 (var -> SVAR .)
    SHIFT_R         reduce using rule 58 (var -> SVAR .)
    EQUAL           reduce using rule 58 (var -> SVAR .)
    NOT_EQUAL       reduce using rule 58 (var -> SVAR .)
    GREATER         reduce using rule 58 (var -> SVAR .)
    LESS            reduce using rule 58 (var -> SVAR .)
    GREATER_EQUAL   reduce using rule 58 (var -> SVAR .)
    LESS_EQUAL      reduce using rule 58 (var -> SVAR .)
    PLUS            reduce using rule 58 (var -> SVAR .)
    MINUS           reduce using rule 58 (var -> SVAR .)
    MULTIPLY        reduce using rule 58 (var -> SVAR .)
    DIVIDE          reduce using rule 58 (var -> SVAR .)
    REMAINDER       reduce using rule 58 (var -> SVAR .)
    SEMICOLON       reduce using rule 58 (var -> SVAR .)
    AND             reduce using rule 58 (var -> SVAR .)
    OR              reduce using rule 58 (var -> SVAR .)
    R_BRACKET       reduce using rule 58 (var -> SVAR .)
    R_PAR           reduce using rule 58 (var -> SVAR .)


state 75

    (38) relational -> arithmetic . EQUAL arithmetic
    (39) relational -> arithmetic . NOT_EQUAL arithmetic
    (40) relational -> arithmetic . GREATER arithmetic
    (41) relational -> arithmetic . LESS arithmetic
    (42) relational -> arithmetic . GREATER_EQUAL arithmetic
    (43) relational -> arithmetic . LESS_EQUAL arithmetic
    (44) relational -> arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           shift and go to state 145
    NOT_EQUAL       shift and go to state 146
    GREATER         shift and go to state 147
    LESS            shift and go to state 148
    GREATER_EQUAL   shift and go to state 149
    LESS_EQUAL      shift and go to state 150
    SEMICOLON       reduce using rule 44 (relational -> arithmetic .)
    AND             reduce using rule 44 (relational -> arithmetic .)
    OR              reduce using rule 44 (relational -> arithmetic .)
    R_PAR           reduce using rule 44 (relational -> arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 76

    (59) var -> RAVAR .

    AND_B           reduce using rule 59 (var -> RAVAR .)
    OR_B            reduce using rule 59 (var -> RAVAR .)
    XOR_B           reduce using rule 59 (var -> RAVAR .)
    SHIFT_L         reduce using rule 59 (var -> RAVAR .)
    SHIFT_R         reduce using rule 59 (var -> RAVAR .)
    EQUAL           reduce using rule 59 (var -> RAVAR .)
    NOT_EQUAL       reduce using rule 59 (var -> RAVAR .)
    GREATER         reduce using rule 59 (var -> RAVAR .)
    LESS            reduce using rule 59 (var -> RAVAR .)
    GREATER_EQUAL   reduce using rule 59 (var -> RAVAR .)
    LESS_EQUAL      reduce using rule 59 (var -> RAVAR .)
    PLUS            reduce using rule 59 (var -> RAVAR .)
    MINUS           reduce using rule 59 (var -> RAVAR .)
    MULTIPLY        reduce using rule 59 (var -> RAVAR .)
    DIVIDE          reduce using rule 59 (var -> RAVAR .)
    REMAINDER       reduce using rule 59 (var -> RAVAR .)
    SEMICOLON       reduce using rule 59 (var -> RAVAR .)
    AND             reduce using rule 59 (var -> RAVAR .)
    OR              reduce using rule 59 (var -> RAVAR .)
    R_BRACKET       reduce using rule 59 (var -> RAVAR .)
    R_PAR           reduce using rule 59 (var -> RAVAR .)


state 77

    (60) var -> SPVAR .

    AND_B           reduce using rule 60 (var -> SPVAR .)
    OR_B            reduce using rule 60 (var -> SPVAR .)
    XOR_B           reduce using rule 60 (var -> SPVAR .)
    SHIFT_L         reduce using rule 60 (var -> SPVAR .)
    SHIFT_R         reduce using rule 60 (var -> SPVAR .)
    EQUAL           reduce using rule 60 (var -> SPVAR .)
    NOT_EQUAL       reduce using rule 60 (var -> SPVAR .)
    GREATER         reduce using rule 60 (var -> SPVAR .)
    LESS            reduce using rule 60 (var -> SPVAR .)
    GREATER_EQUAL   reduce using rule 60 (var -> SPVAR .)
    LESS_EQUAL      reduce using rule 60 (var -> SPVAR .)
    PLUS            reduce using rule 60 (var -> SPVAR .)
    MINUS           reduce using rule 60 (var -> SPVAR .)
    MULTIPLY        reduce using rule 60 (var -> SPVAR .)
    DIVIDE          reduce using rule 60 (var -> SPVAR .)
    REMAINDER       reduce using rule 60 (var -> SPVAR .)
    SEMICOLON       reduce using rule 60 (var -> SPVAR .)
    AND             reduce using rule 60 (var -> SPVAR .)
    OR              reduce using rule 60 (var -> SPVAR .)
    R_BRACKET       reduce using rule 60 (var -> SPVAR .)
    R_PAR           reduce using rule 60 (var -> SPVAR .)


state 78

    (50) arithmetic -> INTEGER .

    EQUAL           reduce using rule 50 (arithmetic -> INTEGER .)
    NOT_EQUAL       reduce using rule 50 (arithmetic -> INTEGER .)
    GREATER         reduce using rule 50 (arithmetic -> INTEGER .)
    LESS            reduce using rule 50 (arithmetic -> INTEGER .)
    GREATER_EQUAL   reduce using rule 50 (arithmetic -> INTEGER .)
    LESS_EQUAL      reduce using rule 50 (arithmetic -> INTEGER .)
    PLUS            reduce using rule 50 (arithmetic -> INTEGER .)
    MINUS           reduce using rule 50 (arithmetic -> INTEGER .)
    MULTIPLY        reduce using rule 50 (arithmetic -> INTEGER .)
    DIVIDE          reduce using rule 50 (arithmetic -> INTEGER .)
    REMAINDER       reduce using rule 50 (arithmetic -> INTEGER .)
    SEMICOLON       reduce using rule 50 (arithmetic -> INTEGER .)
    AND             reduce using rule 50 (arithmetic -> INTEGER .)
    OR              reduce using rule 50 (arithmetic -> INTEGER .)
    R_BRACKET       reduce using rule 50 (arithmetic -> INTEGER .)
    R_PAR           reduce using rule 50 (arithmetic -> INTEGER .)


state 79

    (51) arithmetic -> DECIMAL .

    EQUAL           reduce using rule 51 (arithmetic -> DECIMAL .)
    NOT_EQUAL       reduce using rule 51 (arithmetic -> DECIMAL .)
    GREATER         reduce using rule 51 (arithmetic -> DECIMAL .)
    LESS            reduce using rule 51 (arithmetic -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 51 (arithmetic -> DECIMAL .)
    LESS_EQUAL      reduce using rule 51 (arithmetic -> DECIMAL .)
    PLUS            reduce using rule 51 (arithmetic -> DECIMAL .)
    MINUS           reduce using rule 51 (arithmetic -> DECIMAL .)
    MULTIPLY        reduce using rule 51 (arithmetic -> DECIMAL .)
    DIVIDE          reduce using rule 51 (arithmetic -> DECIMAL .)
    REMAINDER       reduce using rule 51 (arithmetic -> DECIMAL .)
    SEMICOLON       reduce using rule 51 (arithmetic -> DECIMAL .)
    AND             reduce using rule 51 (arithmetic -> DECIMAL .)
    OR              reduce using rule 51 (arithmetic -> DECIMAL .)
    R_BRACKET       reduce using rule 51 (arithmetic -> DECIMAL .)
    R_PAR           reduce using rule 51 (arithmetic -> DECIMAL .)


state 80

    (52) arithmetic -> STRING .

    EQUAL           reduce using rule 52 (arithmetic -> STRING .)
    NOT_EQUAL       reduce using rule 52 (arithmetic -> STRING .)
    GREATER         reduce using rule 52 (arithmetic -> STRING .)
    LESS            reduce using rule 52 (arithmetic -> STRING .)
    GREATER_EQUAL   reduce using rule 52 (arithmetic -> STRING .)
    LESS_EQUAL      reduce using rule 52 (arithmetic -> STRING .)
    PLUS            reduce using rule 52 (arithmetic -> STRING .)
    MINUS           reduce using rule 52 (arithmetic -> STRING .)
    MULTIPLY        reduce using rule 52 (arithmetic -> STRING .)
    DIVIDE          reduce using rule 52 (arithmetic -> STRING .)
    REMAINDER       reduce using rule 52 (arithmetic -> STRING .)
    SEMICOLON       reduce using rule 52 (arithmetic -> STRING .)
    AND             reduce using rule 52 (arithmetic -> STRING .)
    OR              reduce using rule 52 (arithmetic -> STRING .)
    R_BRACKET       reduce using rule 52 (arithmetic -> STRING .)
    R_PAR           reduce using rule 52 (arithmetic -> STRING .)


state 81

    (54) arithmetic -> array_access .

    EQUAL           reduce using rule 54 (arithmetic -> array_access .)
    NOT_EQUAL       reduce using rule 54 (arithmetic -> array_access .)
    GREATER         reduce using rule 54 (arithmetic -> array_access .)
    LESS            reduce using rule 54 (arithmetic -> array_access .)
    GREATER_EQUAL   reduce using rule 54 (arithmetic -> array_access .)
    LESS_EQUAL      reduce using rule 54 (arithmetic -> array_access .)
    PLUS            reduce using rule 54 (arithmetic -> array_access .)
    MINUS           reduce using rule 54 (arithmetic -> array_access .)
    MULTIPLY        reduce using rule 54 (arithmetic -> array_access .)
    DIVIDE          reduce using rule 54 (arithmetic -> array_access .)
    REMAINDER       reduce using rule 54 (arithmetic -> array_access .)
    SEMICOLON       reduce using rule 54 (arithmetic -> array_access .)
    AND             reduce using rule 54 (arithmetic -> array_access .)
    OR              reduce using rule 54 (arithmetic -> array_access .)
    R_BRACKET       reduce using rule 54 (arithmetic -> array_access .)
    R_PAR           reduce using rule 54 (arithmetic -> array_access .)


state 82

    (78) assign -> TVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (108) declaration -> TVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 156
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 83

    (53) arithmetic -> var .

    R_BRACKET       reduce using rule 53 (arithmetic -> var .)
    PLUS            reduce using rule 53 (arithmetic -> var .)
    MINUS           reduce using rule 53 (arithmetic -> var .)
    MULTIPLY        reduce using rule 53 (arithmetic -> var .)
    DIVIDE          reduce using rule 53 (arithmetic -> var .)
    REMAINDER       reduce using rule 53 (arithmetic -> var .)
    EQUAL           reduce using rule 53 (arithmetic -> var .)
    NOT_EQUAL       reduce using rule 53 (arithmetic -> var .)
    GREATER         reduce using rule 53 (arithmetic -> var .)
    LESS            reduce using rule 53 (arithmetic -> var .)
    GREATER_EQUAL   reduce using rule 53 (arithmetic -> var .)
    LESS_EQUAL      reduce using rule 53 (arithmetic -> var .)
    R_PAR           reduce using rule 53 (arithmetic -> var .)
    AND             reduce using rule 53 (arithmetic -> var .)
    OR              reduce using rule 53 (arithmetic -> var .)
    SEMICOLON       reduce using rule 53 (arithmetic -> var .)


state 84

    (63) assign -> AVAR ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 157
    AND             shift and go to state 124
    OR              shift and go to state 125


state 85

    (67) assign -> AVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 158


state 86

    (71) assign -> AVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 159


state 87

    (75) assign -> AVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 160


state 88

    (85) assign -> AVAR ASSIGN ABS . L_PAR var R_PAR SEMICOLON

    L_PAR           shift and go to state 161


state 89

    (103) declaration -> AVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 162


state 90

    (79) assign -> AVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (109) declaration -> AVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 163
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 91

    (64) assign -> VVAR ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 164
    AND             shift and go to state 124
    OR              shift and go to state 125


state 92

    (68) assign -> VVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 165


state 93

    (72) assign -> VVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 166


state 94

    (76) assign -> VVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 167


state 95

    (86) assign -> VVAR ASSIGN ABS . L_PAR var R_PAR SEMICOLON

    L_PAR           shift and go to state 168


state 96

    (104) declaration -> VVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 169


state 97

    (80) assign -> VVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (110) declaration -> VVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 170
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 98

    (65) assign -> SVAR ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 171
    AND             shift and go to state 124
    OR              shift and go to state 125


state 99

    (69) assign -> SVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 172


state 100

    (73) assign -> SVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 173


state 101

    (77) assign -> SVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 174


state 102

    (87) assign -> SVAR ASSIGN ABS . L_PAR var R_PAR SEMICOLON

    L_PAR           shift and go to state 175


state 103

    (105) declaration -> SVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 176


state 104

    (81) assign -> SVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (111) declaration -> SVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 177
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 105

    (82) assign -> SPVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (112) declaration -> SPVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 178
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 106

    (106) declaration -> SPVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 179


state 107

    (83) assign -> RAVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (113) declaration -> RAVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 180
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 108

    (107) declaration -> RAVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 181


state 109

    (18) print -> PRINT L_PAR TVAR . R_PAR SEMICOLON
    (24) print -> PRINT L_PAR TVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 182
    L_BRACKET       shift and go to state 183


state 110

    (19) print -> PRINT L_PAR AVAR . R_PAR SEMICOLON
    (25) print -> PRINT L_PAR AVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 184
    L_BRACKET       shift and go to state 185


state 111

    (20) print -> PRINT L_PAR VVAR . R_PAR SEMICOLON
    (26) print -> PRINT L_PAR VVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 186
    L_BRACKET       shift and go to state 187


state 112

    (21) print -> PRINT L_PAR SVAR . R_PAR SEMICOLON
    (27) print -> PRINT L_PAR SVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 188
    L_BRACKET       shift and go to state 189


state 113

    (22) print -> PRINT L_PAR SPVAR . R_PAR SEMICOLON
    (28) print -> PRINT L_PAR SPVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 190
    L_BRACKET       shift and go to state 191


state 114

    (23) print -> PRINT L_PAR RAVAR . R_PAR SEMICOLON
    (29) print -> PRINT L_PAR RAVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 192
    L_BRACKET       shift and go to state 193


state 115

    (30) print -> PRINT L_PAR STRING . R_PAR SEMICOLON

    R_PAR           shift and go to state 194


state 116

    (33) if -> IF L_PAR condition . R_PAR GOTO NAME SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    R_PAR           shift and go to state 195
    AND             shift and go to state 124
    OR              shift and go to state 125


state 117

    (12) unset -> UNSET L_PAR TVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 196


state 118

    (13) unset -> UNSET L_PAR AVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 197


state 119

    (14) unset -> UNSET L_PAR VVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 198


state 120

    (15) unset -> UNSET L_PAR SVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 199


state 121

    (16) unset -> UNSET L_PAR SPVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 200


state 122

    (17) unset -> UNSET L_PAR RAVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 201


state 123

    (62) assign -> TVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 62 (assign -> TVAR ASSIGN condition SEMICOLON .)


state 124

    (34) condition -> condition AND . condition
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 202
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 125

    (35) condition -> condition OR . condition
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    condition                      shift and go to state 203
    relational                     shift and go to state 70
    arithmetic                     shift and go to state 75
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 126

    (66) assign -> TVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 66 (assign -> TVAR ASSIGN conversion SEMICOLON .)


state 127

    (70) assign -> TVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 204


state 128

    (97) conversion -> L_PAR type . R_PAR var

    R_PAR           shift and go to state 205


state 129

    (98) type -> INT .

    R_PAR           reduce using rule 98 (type -> INT .)


state 130

    (99) type -> FLOAT .

    R_PAR           reduce using rule 99 (type -> FLOAT .)


state 131

    (100) type -> CHAR .

    R_PAR           reduce using rule 100 (type -> CHAR .)


state 132

    (74) assign -> TVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 74 (assign -> TVAR ASSIGN bitwise SEMICOLON .)


state 133

    (84) assign -> TVAR ASSIGN ABS L_PAR . var R_PAR SEMICOLON
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 206

state 134

    (88) bitwise -> var AND_B . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 207

state 135

    (89) bitwise -> var OR_B . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 208

state 136

    (90) bitwise -> var XOR_B . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 209

state 137

    (91) bitwise -> var SHIFT_L . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 210

state 138

    (92) bitwise -> var SHIFT_R . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 211

state 139

    (102) declaration -> TVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 212


state 140

    (36) condition -> NOT condition .
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 36 (condition -> NOT condition .)
    R_PAR           reduce using rule 36 (condition -> NOT condition .)
    AND             shift and go to state 124
    OR              shift and go to state 125

  ! AND             [ reduce using rule 36 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 36 (condition -> NOT condition .) ]


state 141

    (93) bitwise -> NOT_B TVAR .

    SEMICOLON       reduce using rule 93 (bitwise -> NOT_B TVAR .)


state 142

    (94) bitwise -> NOT_B AVAR .

    SEMICOLON       reduce using rule 94 (bitwise -> NOT_B AVAR .)


state 143

    (95) bitwise -> NOT_B VVAR .

    SEMICOLON       reduce using rule 95 (bitwise -> NOT_B VVAR .)


state 144

    (96) bitwise -> NOT_B SVAR .

    SEMICOLON       reduce using rule 96 (bitwise -> NOT_B SVAR .)


state 145

    (38) relational -> arithmetic EQUAL . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 213
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 146

    (39) relational -> arithmetic NOT_EQUAL . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 214
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 147

    (40) relational -> arithmetic GREATER . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 215
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 148

    (41) relational -> arithmetic LESS . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 216
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 149

    (42) relational -> arithmetic GREATER_EQUAL . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 217
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 150

    (43) relational -> arithmetic LESS_EQUAL . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 218
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 151

    (45) arithmetic -> arithmetic PLUS . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_BRACKET       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 219
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 152

    (46) arithmetic -> arithmetic MINUS . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_BRACKET       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 220
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 153

    (47) arithmetic -> arithmetic MULTIPLY . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_BRACKET       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 221
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 154

    (48) arithmetic -> arithmetic DIVIDE . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_BRACKET       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 222
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 155

    (49) arithmetic -> arithmetic REMAINDER . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)
    R_BRACKET       reduce using rule 61 (array_access -> .)
    R_PAR           reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 223
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 156

    (78) assign -> TVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (108) declaration -> TVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 224
    SEMICOLON       shift and go to state 225


state 157

    (63) assign -> AVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 63 (assign -> AVAR ASSIGN condition SEMICOLON .)


state 158

    (67) assign -> AVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 67 (assign -> AVAR ASSIGN conversion SEMICOLON .)


state 159

    (71) assign -> AVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 226


state 160

    (75) assign -> AVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 75 (assign -> AVAR ASSIGN bitwise SEMICOLON .)


state 161

    (85) assign -> AVAR ASSIGN ABS L_PAR . var R_PAR SEMICOLON
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 227

state 162

    (103) declaration -> AVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 228


state 163

    (79) assign -> AVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (109) declaration -> AVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 229
    SEMICOLON       shift and go to state 230


state 164

    (64) assign -> VVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 64 (assign -> VVAR ASSIGN condition SEMICOLON .)


state 165

    (68) assign -> VVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 68 (assign -> VVAR ASSIGN conversion SEMICOLON .)


state 166

    (72) assign -> VVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 231


state 167

    (76) assign -> VVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 76 (assign -> VVAR ASSIGN bitwise SEMICOLON .)


state 168

    (86) assign -> VVAR ASSIGN ABS L_PAR . var R_PAR SEMICOLON
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 232

state 169

    (104) declaration -> VVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 233


state 170

    (80) assign -> VVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (110) declaration -> VVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 234
    SEMICOLON       shift and go to state 235


state 171

    (65) assign -> SVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 65 (assign -> SVAR ASSIGN condition SEMICOLON .)


state 172

    (69) assign -> SVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 69 (assign -> SVAR ASSIGN conversion SEMICOLON .)


state 173

    (73) assign -> SVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 236


state 174

    (77) assign -> SVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 77 (assign -> SVAR ASSIGN bitwise SEMICOLON .)


state 175

    (87) assign -> SVAR ASSIGN ABS L_PAR . var R_PAR SEMICOLON
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 237

state 176

    (105) declaration -> SVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 238


state 177

    (81) assign -> SVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (111) declaration -> SVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 239
    SEMICOLON       shift and go to state 240


state 178

    (82) assign -> SPVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (112) declaration -> SPVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 241
    SEMICOLON       shift and go to state 242


state 179

    (106) declaration -> SPVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 243


state 180

    (83) assign -> RAVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (113) declaration -> RAVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 244
    SEMICOLON       shift and go to state 245


state 181

    (107) declaration -> RAVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 246


state 182

    (18) print -> PRINT L_PAR TVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 247


state 183

    (24) print -> PRINT L_PAR TVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 248
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 184

    (19) print -> PRINT L_PAR AVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 249


state 185

    (25) print -> PRINT L_PAR AVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 250
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 186

    (20) print -> PRINT L_PAR VVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 251


state 187

    (26) print -> PRINT L_PAR VVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 252
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 188

    (21) print -> PRINT L_PAR SVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 253


state 189

    (27) print -> PRINT L_PAR SVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 254
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 190

    (22) print -> PRINT L_PAR SPVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 255


state 191

    (28) print -> PRINT L_PAR SPVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 256
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 192

    (23) print -> PRINT L_PAR RAVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 257


state 193

    (29) print -> PRINT L_PAR RAVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    R_BRACKET       reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 258
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 194

    (30) print -> PRINT L_PAR STRING R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 259


state 195

    (33) if -> IF L_PAR condition R_PAR . GOTO NAME SEMICOLON

    GOTO            shift and go to state 260


state 196

    (12) unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    IF              reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    $end            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)


state 197

    (13) unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    IF              reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    $end            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)


state 198

    (14) unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    IF              reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    $end            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)


state 199

    (15) unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    IF              reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    $end            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)


state 200

    (16) unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    IF              reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    $end            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)


state 201

    (17) unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    IF              reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    $end            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)


state 202

    (34) condition -> condition AND condition .
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       reduce using rule 34 (condition -> condition AND condition .)
    AND             reduce using rule 34 (condition -> condition AND condition .)
    OR              reduce using rule 34 (condition -> condition AND condition .)
    R_PAR           reduce using rule 34 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 203

    (35) condition -> condition OR condition .
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       reduce using rule 35 (condition -> condition OR condition .)
    OR              reduce using rule 35 (condition -> condition OR condition .)
    R_PAR           reduce using rule 35 (condition -> condition OR condition .)
    AND             shift and go to state 124

  ! AND             [ reduce using rule 35 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 125 ]


state 204

    (70) assign -> TVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 261


state 205

    (97) conversion -> L_PAR type R_PAR . var
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77

    var                            shift and go to state 262

state 206

    (84) assign -> TVAR ASSIGN ABS L_PAR var . R_PAR SEMICOLON

    R_PAR           shift and go to state 263


state 207

    (88) bitwise -> var AND_B var .

    SEMICOLON       reduce using rule 88 (bitwise -> var AND_B var .)


state 208

    (89) bitwise -> var OR_B var .

    SEMICOLON       reduce using rule 89 (bitwise -> var OR_B var .)


state 209

    (90) bitwise -> var XOR_B var .

    SEMICOLON       reduce using rule 90 (bitwise -> var XOR_B var .)


state 210

    (91) bitwise -> var SHIFT_L var .

    SEMICOLON       reduce using rule 91 (bitwise -> var SHIFT_L var .)


state 211

    (92) bitwise -> var SHIFT_R var .

    SEMICOLON       reduce using rule 92 (bitwise -> var SHIFT_R var .)


state 212

    (102) declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 264


state 213

    (38) relational -> arithmetic EQUAL arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 38 (relational -> arithmetic EQUAL arithmetic .)
    AND             reduce using rule 38 (relational -> arithmetic EQUAL arithmetic .)
    OR              reduce using rule 38 (relational -> arithmetic EQUAL arithmetic .)
    R_PAR           reduce using rule 38 (relational -> arithmetic EQUAL arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 214

    (39) relational -> arithmetic NOT_EQUAL arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 39 (relational -> arithmetic NOT_EQUAL arithmetic .)
    AND             reduce using rule 39 (relational -> arithmetic NOT_EQUAL arithmetic .)
    OR              reduce using rule 39 (relational -> arithmetic NOT_EQUAL arithmetic .)
    R_PAR           reduce using rule 39 (relational -> arithmetic NOT_EQUAL arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 215

    (40) relational -> arithmetic GREATER arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 40 (relational -> arithmetic GREATER arithmetic .)
    AND             reduce using rule 40 (relational -> arithmetic GREATER arithmetic .)
    OR              reduce using rule 40 (relational -> arithmetic GREATER arithmetic .)
    R_PAR           reduce using rule 40 (relational -> arithmetic GREATER arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 216

    (41) relational -> arithmetic LESS arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 41 (relational -> arithmetic LESS arithmetic .)
    AND             reduce using rule 41 (relational -> arithmetic LESS arithmetic .)
    OR              reduce using rule 41 (relational -> arithmetic LESS arithmetic .)
    R_PAR           reduce using rule 41 (relational -> arithmetic LESS arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 217

    (42) relational -> arithmetic GREATER_EQUAL arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 42 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    AND             reduce using rule 42 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    OR              reduce using rule 42 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    R_PAR           reduce using rule 42 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 218

    (43) relational -> arithmetic LESS_EQUAL arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 43 (relational -> arithmetic LESS_EQUAL arithmetic .)
    AND             reduce using rule 43 (relational -> arithmetic LESS_EQUAL arithmetic .)
    OR              reduce using rule 43 (relational -> arithmetic LESS_EQUAL arithmetic .)
    R_PAR           reduce using rule 43 (relational -> arithmetic LESS_EQUAL arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 219

    (45) arithmetic -> arithmetic PLUS arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    NOT_EQUAL       reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    GREATER         reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    LESS            reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    GREATER_EQUAL   reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    LESS_EQUAL      reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    PLUS            reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    MINUS           reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    REMAINDER       reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    SEMICOLON       reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    AND             reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    OR              reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    R_BRACKET       reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    R_PAR           reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .)
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154

  ! MULTIPLY        [ reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .) ]
  ! DIVIDE          [ reduce using rule 45 (arithmetic -> arithmetic PLUS arithmetic .) ]
  ! PLUS            [ shift and go to state 151 ]
  ! MINUS           [ shift and go to state 152 ]
  ! REMAINDER       [ shift and go to state 155 ]


state 220

    (46) arithmetic -> arithmetic MINUS arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    NOT_EQUAL       reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    GREATER         reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    LESS            reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    GREATER_EQUAL   reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    LESS_EQUAL      reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    PLUS            reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    MINUS           reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    REMAINDER       reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    SEMICOLON       reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    AND             reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    OR              reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    R_BRACKET       reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    R_PAR           reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .)
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154

  ! MULTIPLY        [ reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .) ]
  ! DIVIDE          [ reduce using rule 46 (arithmetic -> arithmetic MINUS arithmetic .) ]
  ! PLUS            [ shift and go to state 151 ]
  ! MINUS           [ shift and go to state 152 ]
  ! REMAINDER       [ shift and go to state 155 ]


state 221

    (47) arithmetic -> arithmetic MULTIPLY arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    NOT_EQUAL       reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    GREATER         reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    LESS            reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    GREATER_EQUAL   reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    LESS_EQUAL      reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    PLUS            reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    MINUS           reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    MULTIPLY        reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    DIVIDE          reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    REMAINDER       reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    SEMICOLON       reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    AND             reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    OR              reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    R_BRACKET       reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    R_PAR           reduce using rule 47 (arithmetic -> arithmetic MULTIPLY arithmetic .)

  ! PLUS            [ shift and go to state 151 ]
  ! MINUS           [ shift and go to state 152 ]
  ! MULTIPLY        [ shift and go to state 153 ]
  ! DIVIDE          [ shift and go to state 154 ]
  ! REMAINDER       [ shift and go to state 155 ]


state 222

    (48) arithmetic -> arithmetic DIVIDE arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    NOT_EQUAL       reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    GREATER         reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    LESS            reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    GREATER_EQUAL   reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    LESS_EQUAL      reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    PLUS            reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    MINUS           reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    MULTIPLY        reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    DIVIDE          reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    REMAINDER       reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    SEMICOLON       reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    AND             reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    OR              reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    R_BRACKET       reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)
    R_PAR           reduce using rule 48 (arithmetic -> arithmetic DIVIDE arithmetic .)

  ! PLUS            [ shift and go to state 151 ]
  ! MINUS           [ shift and go to state 152 ]
  ! MULTIPLY        [ shift and go to state 153 ]
  ! DIVIDE          [ shift and go to state 154 ]
  ! REMAINDER       [ shift and go to state 155 ]


state 223

    (49) arithmetic -> arithmetic REMAINDER arithmetic .
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
    EQUAL           reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    NOT_EQUAL       reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    GREATER         reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    LESS            reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    GREATER_EQUAL   reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    LESS_EQUAL      reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    SEMICOLON       reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    AND             reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    OR              reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    R_BRACKET       reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    R_PAR           reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155

  ! PLUS            [ reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! MINUS           [ reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! MULTIPLY        [ reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! DIVIDE          [ reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! REMAINDER       [ reduce using rule 49 (arithmetic -> arithmetic REMAINDER arithmetic .) ]


state 224

    (78) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 265
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 225

    (108) declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 108 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 226

    (71) assign -> AVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 266


state 227

    (85) assign -> AVAR ASSIGN ABS L_PAR var . R_PAR SEMICOLON

    R_PAR           shift and go to state 267


state 228

    (103) declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 268


state 229

    (79) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 269
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 230

    (109) declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 109 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 231

    (72) assign -> VVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 270


state 232

    (86) assign -> VVAR ASSIGN ABS L_PAR var . R_PAR SEMICOLON

    R_PAR           shift and go to state 271


state 233

    (104) declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 272


state 234

    (80) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 273
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 235

    (110) declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 110 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 236

    (73) assign -> SVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 274


state 237

    (87) assign -> SVAR ASSIGN ABS L_PAR var . R_PAR SEMICOLON

    R_PAR           shift and go to state 275


state 238

    (105) declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 276


state 239

    (81) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 277
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 240

    (111) declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 111 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 241

    (82) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 278
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 242

    (112) declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 112 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 243

    (106) declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 279


state 244

    (83) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (34) condition -> . condition AND condition
    (35) condition -> . condition OR condition
    (36) condition -> . NOT condition
    (37) condition -> . relational
    (38) relational -> . arithmetic EQUAL arithmetic
    (39) relational -> . arithmetic NOT_EQUAL arithmetic
    (40) relational -> . arithmetic GREATER arithmetic
    (41) relational -> . arithmetic LESS arithmetic
    (42) relational -> . arithmetic GREATER_EQUAL arithmetic
    (43) relational -> . arithmetic LESS_EQUAL arithmetic
    (44) relational -> . arithmetic
    (45) arithmetic -> . arithmetic PLUS arithmetic
    (46) arithmetic -> . arithmetic MINUS arithmetic
    (47) arithmetic -> . arithmetic MULTIPLY arithmetic
    (48) arithmetic -> . arithmetic DIVIDE arithmetic
    (49) arithmetic -> . arithmetic REMAINDER arithmetic
    (50) arithmetic -> . INTEGER
    (51) arithmetic -> . DECIMAL
    (52) arithmetic -> . STRING
    (53) arithmetic -> . var
    (54) arithmetic -> . array_access
    (55) var -> . TVAR
    (56) var -> . AVAR
    (57) var -> . VVAR
    (58) var -> . SVAR
    (59) var -> . RAVAR
    (60) var -> . SPVAR
    (61) array_access -> .

    NOT             shift and go to state 69
    INTEGER         shift and go to state 78
    DECIMAL         shift and go to state 79
    STRING          shift and go to state 80
    TVAR            shift and go to state 60
    AVAR            shift and go to state 72
    VVAR            shift and go to state 73
    SVAR            shift and go to state 74
    RAVAR           shift and go to state 76
    SPVAR           shift and go to state 77
    EQUAL           reduce using rule 61 (array_access -> .)
    NOT_EQUAL       reduce using rule 61 (array_access -> .)
    GREATER         reduce using rule 61 (array_access -> .)
    LESS            reduce using rule 61 (array_access -> .)
    GREATER_EQUAL   reduce using rule 61 (array_access -> .)
    LESS_EQUAL      reduce using rule 61 (array_access -> .)
    PLUS            reduce using rule 61 (array_access -> .)
    MINUS           reduce using rule 61 (array_access -> .)
    MULTIPLY        reduce using rule 61 (array_access -> .)
    DIVIDE          reduce using rule 61 (array_access -> .)
    REMAINDER       reduce using rule 61 (array_access -> .)
    SEMICOLON       reduce using rule 61 (array_access -> .)
    AND             reduce using rule 61 (array_access -> .)
    OR              reduce using rule 61 (array_access -> .)

    arithmetic                     shift and go to state 75
    condition                      shift and go to state 280
    relational                     shift and go to state 70
    var                            shift and go to state 83
    array_access                   shift and go to state 81

state 245

    (113) declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 113 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 246

    (107) declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 281


state 247

    (18) print -> PRINT L_PAR TVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    IF              reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    $end            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)


state 248

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 282
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 249

    (19) print -> PRINT L_PAR AVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    IF              reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    $end            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)


state 250

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 283
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 251

    (20) print -> PRINT L_PAR VVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    IF              reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    $end            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)


state 252

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 284
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 253

    (21) print -> PRINT L_PAR SVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    IF              reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    $end            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)


state 254

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 285
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 255

    (22) print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    IF              reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    $end            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)


state 256

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 286
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 257

    (23) print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    IF              reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    $end            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)


state 258

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (45) arithmetic -> arithmetic . PLUS arithmetic
    (46) arithmetic -> arithmetic . MINUS arithmetic
    (47) arithmetic -> arithmetic . MULTIPLY arithmetic
    (48) arithmetic -> arithmetic . DIVIDE arithmetic
    (49) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 287
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    MULTIPLY        shift and go to state 153
    DIVIDE          shift and go to state 154
    REMAINDER       shift and go to state 155


state 259

    (30) print -> PRINT L_PAR STRING R_PAR SEMICOLON .

    GOTO            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    UNSET           reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    PRINT           reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    EXIT            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    NAME            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    IF              reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    TVAR            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    AVAR            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    VVAR            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    SVAR            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    SPVAR           reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    RAVAR           reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)
    $end            reduce using rule 30 (print -> PRINT L_PAR STRING R_PAR SEMICOLON .)


state 260

    (33) if -> IF L_PAR condition R_PAR GOTO . NAME SEMICOLON

    NAME            shift and go to state 288


state 261

    (70) assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 70 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 262

    (97) conversion -> L_PAR type R_PAR var .

    SEMICOLON       reduce using rule 97 (conversion -> L_PAR type R_PAR var .)


state 263

    (84) assign -> TVAR ASSIGN ABS L_PAR var R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 289


state 264

    (102) declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 102 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 265

    (78) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 290
    AND             shift and go to state 124
    OR              shift and go to state 125


state 266

    (71) assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 71 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 267

    (85) assign -> AVAR ASSIGN ABS L_PAR var R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 291


state 268

    (103) declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 103 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 269

    (79) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 292
    AND             shift and go to state 124
    OR              shift and go to state 125


state 270

    (72) assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 72 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 271

    (86) assign -> VVAR ASSIGN ABS L_PAR var R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 293


state 272

    (104) declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 104 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 273

    (80) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 294
    AND             shift and go to state 124
    OR              shift and go to state 125


state 274

    (73) assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 73 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 275

    (87) assign -> SVAR ASSIGN ABS L_PAR var R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 295


state 276

    (105) declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 105 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 277

    (81) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 296
    AND             shift and go to state 124
    OR              shift and go to state 125


state 278

    (82) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 297
    AND             shift and go to state 124
    OR              shift and go to state 125


state 279

    (106) declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 106 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 280

    (83) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (34) condition -> condition . AND condition
    (35) condition -> condition . OR condition

    SEMICOLON       shift and go to state 298
    AND             shift and go to state 124
    OR              shift and go to state 125


state 281

    (107) declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 107 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 282

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 299


state 283

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 300


state 284

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 301


state 285

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 302


state 286

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 303


state 287

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 304


state 288

    (33) if -> IF L_PAR condition R_PAR GOTO NAME . SEMICOLON

    SEMICOLON       shift and go to state 305


state 289

    (84) assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .

    GOTO            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    UNSET           reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    PRINT           reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    EXIT            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    NAME            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    IF              reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    TVAR            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    AVAR            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    VVAR            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SVAR            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SPVAR           reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    RAVAR           reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    $end            reduce using rule 84 (assign -> TVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)


state 290

    (78) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 78 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 291

    (85) assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .

    GOTO            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    UNSET           reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    PRINT           reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    EXIT            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    NAME            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    IF              reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    TVAR            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    AVAR            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    VVAR            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SVAR            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SPVAR           reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    RAVAR           reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    $end            reduce using rule 85 (assign -> AVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)


state 292

    (79) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 79 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 293

    (86) assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .

    GOTO            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    UNSET           reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    PRINT           reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    EXIT            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    NAME            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    IF              reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    TVAR            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    AVAR            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    VVAR            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SVAR            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SPVAR           reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    RAVAR           reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    $end            reduce using rule 86 (assign -> VVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)


state 294

    (80) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 80 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 295

    (87) assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .

    GOTO            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    UNSET           reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    PRINT           reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    EXIT            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    NAME            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    IF              reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    TVAR            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    AVAR            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    VVAR            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SVAR            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    SPVAR           reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    RAVAR           reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)
    $end            reduce using rule 87 (assign -> SVAR ASSIGN ABS L_PAR var R_PAR SEMICOLON .)


state 296

    (81) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 81 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 297

    (82) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 82 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 298

    (83) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 83 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 299

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 306


state 300

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 307


state 301

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 308


state 302

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 309


state 303

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 310


state 304

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 311


state 305

    (33) if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .

    GOTO            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    UNSET           reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    PRINT           reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    EXIT            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    NAME            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    IF              reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    TVAR            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    AVAR            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    VVAR            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    SVAR            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    SPVAR           reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    RAVAR           reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    $end            reduce using rule 33 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)


state 306

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 307

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 308

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 309

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 310

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 311

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 223 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 223 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 223 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 223 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 223 resolved as shift
