Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    COMMA
    COMMENT
    QUOTE_1
    QUOTE_2
    XOR

Grammar

Rule 0     S' -> start
Rule 1     start -> MAIN COLON body
Rule 2     body -> goto body
Rule 3     body -> unset body
Rule 4     body -> print body
Rule 5     body -> exit body
Rule 6     body -> tag body
Rule 7     body -> if body
Rule 8     body -> assign body
Rule 9     body -> declaration body
Rule 10    body -> empty
Rule 11    goto -> GOTO NAME SEMICOLON
Rule 12    unset -> UNSET L_PAR TVAR R_PAR SEMICOLON
Rule 13    unset -> UNSET L_PAR AVAR R_PAR SEMICOLON
Rule 14    unset -> UNSET L_PAR VVAR R_PAR SEMICOLON
Rule 15    unset -> UNSET L_PAR SVAR R_PAR SEMICOLON
Rule 16    unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON
Rule 17    unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON
Rule 18    print -> PRINT L_PAR TVAR R_PAR SEMICOLON
Rule 19    print -> PRINT L_PAR AVAR R_PAR SEMICOLON
Rule 20    print -> PRINT L_PAR VVAR R_PAR SEMICOLON
Rule 21    print -> PRINT L_PAR SVAR R_PAR SEMICOLON
Rule 22    print -> PRINT L_PAR SPVAR R_PAR SEMICOLON
Rule 23    print -> PRINT L_PAR RAVAR R_PAR SEMICOLON
Rule 24    print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 25    print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 26    print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 27    print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 28    print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 29    print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
Rule 30    exit -> EXIT SEMICOLON
Rule 31    tag -> NAME COLON
Rule 32    if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON
Rule 33    condition -> condition AND condition
Rule 34    condition -> condition OR condition
Rule 35    condition -> NOT condition
Rule 36    condition -> relational
Rule 37    relational -> arithmetic EQUAL arithmetic
Rule 38    relational -> arithmetic NOT_EQUAL arithmetic
Rule 39    relational -> arithmetic GREATER arithmetic
Rule 40    relational -> arithmetic LESS arithmetic
Rule 41    relational -> arithmetic GREATER_EQUAL arithmetic
Rule 42    relational -> arithmetic LESS_EQUAL arithmetic
Rule 43    relational -> arithmetic
Rule 44    arithmetic -> arithmetic PLUS arithmetic
Rule 45    arithmetic -> arithmetic MINUS arithmetic
Rule 46    arithmetic -> arithmetic MULTIPLY arithmetic
Rule 47    arithmetic -> arithmetic DIVIDE arithmetic
Rule 48    arithmetic -> arithmetic REMAINDER arithmetic
Rule 49    arithmetic -> INTEGER
Rule 50    arithmetic -> DECIMAL
Rule 51    arithmetic -> STRING
Rule 52    arithmetic -> var
Rule 53    arithmetic -> array_access
Rule 54    var -> TVAR
Rule 55    var -> AVAR
Rule 56    var -> VVAR
Rule 57    var -> SVAR
Rule 58    var -> RAVAR
Rule 59    var -> SPVAR
Rule 60    array_access -> <empty>
Rule 61    assign -> TVAR ASSIGN condition SEMICOLON
Rule 62    assign -> AVAR ASSIGN condition SEMICOLON
Rule 63    assign -> VVAR ASSIGN condition SEMICOLON
Rule 64    assign -> SVAR ASSIGN condition SEMICOLON
Rule 65    assign -> TVAR ASSIGN conversion SEMICOLON
Rule 66    assign -> AVAR ASSIGN conversion SEMICOLON
Rule 67    assign -> VVAR ASSIGN conversion SEMICOLON
Rule 68    assign -> SVAR ASSIGN conversion SEMICOLON
Rule 69    assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 70    assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 71    assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 72    assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
Rule 73    assign -> TVAR ASSIGN bitwise SEMICOLON
Rule 74    assign -> AVAR ASSIGN bitwise SEMICOLON
Rule 75    assign -> VVAR ASSIGN bitwise SEMICOLON
Rule 76    assign -> SVAR ASSIGN bitwise SEMICOLON
Rule 77    assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 78    assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 79    assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 80    assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 81    assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 82    assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
Rule 83    bitwise -> var AND_B var
Rule 84    bitwise -> var OR_B var
Rule 85    bitwise -> var XOR_B var
Rule 86    bitwise -> var SHIFT_L var
Rule 87    bitwise -> var SHIFT_R var
Rule 88    bitwise -> NOT_B TVAR
Rule 89    bitwise -> NOT_B AVAR
Rule 90    bitwise -> NOT_B VVAR
Rule 91    bitwise -> NOT_B SVAR
Rule 92    conversion -> L_PAR type R_PAR var
Rule 93    type -> INT
Rule 94    type -> FLOAT
Rule 95    type -> CHAR
Rule 96    declaration -> var
Rule 97    declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 98    declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 99    declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 100   declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 101   declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 102   declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
Rule 103   declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 104   declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 105   declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 106   declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 107   declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 108   declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
Rule 109   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 33
AND_B                : 83
ARRAY                : 97 98 99 100 101 102
ASSIGN               : 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 97 98 99 100 101 102
AVAR                 : 13 19 25 55 62 66 70 74 78 89 98 104
CHAR                 : 95
COLON                : 1 31
COMMA                : 
COMMENT              : 
DECIMAL              : 50
DIVIDE               : 47
EQUAL                : 37
EXIT                 : 30
FLOAT                : 94
GOTO                 : 11 32
GREATER              : 39
GREATER_EQUAL        : 41
IF                   : 32
INT                  : 93
INTEGER              : 49
LESS                 : 40
LESS_EQUAL           : 42
L_BRACKET            : 24 25 26 27 28 29 77 78 79 80 81 82 103 104 105 106 107 108
L_PAR                : 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 69 70 71 72 92 97 98 99 100 101 102
MAIN                 : 1
MINUS                : 45
MULTIPLY             : 46
NAME                 : 11 31 32
NOT                  : 35
NOT_B                : 88 89 90 91
NOT_EQUAL            : 38
OR                   : 34
OR_B                 : 84
PLUS                 : 44
PRINT                : 18 19 20 21 22 23 24 25 26 27 28 29
QUOTE_1              : 
QUOTE_2              : 
RAVAR                : 17 23 29 58 82 102 108
READ                 : 69 70 71 72
REMAINDER            : 48
R_BRACKET            : 24 25 26 27 28 29 77 78 79 80 81 82 103 104 105 106 107 108
R_PAR                : 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 69 70 71 72 92 97 98 99 100 101 102
SEMICOLON            : 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 32 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 97 98 99 100 101 102 103 104 105 106 107 108
SHIFT_L              : 86
SHIFT_R              : 87
SPVAR                : 16 22 28 59 81 101 107
STRING               : 51
SVAR                 : 15 21 27 57 64 68 72 76 80 91 100 106
TVAR                 : 12 18 24 54 61 65 69 73 77 88 97 103
UNSET                : 12 13 14 15 16 17
VVAR                 : 14 20 26 56 63 67 71 75 79 90 99 105
XOR                  : 
XOR_B                : 85
error                : 

Nonterminals, with rules where they appear

arithmetic           : 24 25 26 27 28 29 37 37 38 38 39 39 40 40 41 41 42 42 43 44 44 45 45 46 46 47 47 48 48 77 78 79 80 81 82 103 104 105 106 107 108
array_access         : 53
assign               : 8
bitwise              : 73 74 75 76
body                 : 1 2 3 4 5 6 7 8 9
condition            : 32 33 33 34 34 35 61 62 63 64 77 78 79 80 81 82
conversion           : 65 66 67 68
declaration          : 9
empty                : 10
exit                 : 5
goto                 : 2
if                   : 7
print                : 4
relational           : 36
start                : 0
tag                  : 6
type                 : 92
unset                : 3
var                  : 52 83 83 84 84 85 85 86 86 87 87 92 96

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . MAIN COLON body

    MAIN            shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> MAIN . COLON body

    COLON           shift and go to state 3


state 3

    (1) start -> MAIN COLON . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    body                           shift and go to state 4
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 4

    (1) start -> MAIN COLON body .

    $end            reduce using rule 1 (start -> MAIN COLON body .)


state 5

    (2) body -> goto . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    goto                           shift and go to state 5
    body                           shift and go to state 27
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 6

    (3) body -> unset . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    unset                          shift and go to state 6
    body                           shift and go to state 28
    goto                           shift and go to state 5
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 7

    (4) body -> print . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    print                          shift and go to state 7
    body                           shift and go to state 29
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 8

    (5) body -> exit . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    exit                           shift and go to state 8
    body                           shift and go to state 30
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 9

    (6) body -> tag . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    tag                            shift and go to state 9
    body                           shift and go to state 31
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    if                             shift and go to state 10
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 10

    (7) body -> if . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    if                             shift and go to state 10
    body                           shift and go to state 32
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    assign                         shift and go to state 11
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 11

    (8) body -> assign . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    assign                         shift and go to state 11
    body                           shift and go to state 33
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    declaration                    shift and go to state 12
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 12

    (9) body -> declaration . body
    (2) body -> . goto body
    (3) body -> . unset body
    (4) body -> . print body
    (5) body -> . exit body
    (6) body -> . tag body
    (7) body -> . if body
    (8) body -> . assign body
    (9) body -> . declaration body
    (10) body -> . empty
    (11) goto -> . GOTO NAME SEMICOLON
    (12) unset -> . UNSET L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> . UNSET L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> . UNSET L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> . UNSET L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> . UNSET L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> . UNSET L_PAR RAVAR R_PAR SEMICOLON
    (18) print -> . PRINT L_PAR TVAR R_PAR SEMICOLON
    (19) print -> . PRINT L_PAR AVAR R_PAR SEMICOLON
    (20) print -> . PRINT L_PAR VVAR R_PAR SEMICOLON
    (21) print -> . PRINT L_PAR SVAR R_PAR SEMICOLON
    (22) print -> . PRINT L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> . PRINT L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> . PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> . PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> . PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> . PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> . PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> . PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (30) exit -> . EXIT SEMICOLON
    (31) tag -> . NAME COLON
    (32) if -> . IF L_PAR condition R_PAR GOTO NAME SEMICOLON
    (61) assign -> . TVAR ASSIGN condition SEMICOLON
    (62) assign -> . AVAR ASSIGN condition SEMICOLON
    (63) assign -> . VVAR ASSIGN condition SEMICOLON
    (64) assign -> . SVAR ASSIGN condition SEMICOLON
    (65) assign -> . TVAR ASSIGN conversion SEMICOLON
    (66) assign -> . AVAR ASSIGN conversion SEMICOLON
    (67) assign -> . VVAR ASSIGN conversion SEMICOLON
    (68) assign -> . SVAR ASSIGN conversion SEMICOLON
    (69) assign -> . TVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (70) assign -> . AVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (71) assign -> . VVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (72) assign -> . SVAR ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> . TVAR ASSIGN bitwise SEMICOLON
    (74) assign -> . AVAR ASSIGN bitwise SEMICOLON
    (75) assign -> . VVAR ASSIGN bitwise SEMICOLON
    (76) assign -> . SVAR ASSIGN bitwise SEMICOLON
    (77) assign -> . TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (78) assign -> . AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (79) assign -> . VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (80) assign -> . SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (81) assign -> . SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (82) assign -> . RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (96) declaration -> . var
    (97) declaration -> . TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (98) declaration -> . AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (99) declaration -> . VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (100) declaration -> . SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (101) declaration -> . SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (102) declaration -> . RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> . TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (104) declaration -> . AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (105) declaration -> . VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (106) declaration -> . SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (107) declaration -> . SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (108) declaration -> . RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON
    (109) empty -> .
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    GOTO            shift and go to state 14
    UNSET           shift and go to state 16
    PRINT           shift and go to state 23
    EXIT            shift and go to state 24
    NAME            shift and go to state 15
    IF              shift and go to state 25
    TVAR            shift and go to state 17
    AVAR            shift and go to state 18
    VVAR            shift and go to state 19
    SVAR            shift and go to state 20
    SPVAR           shift and go to state 21
    RAVAR           shift and go to state 22
    $end            reduce using rule 109 (empty -> .)

    declaration                    shift and go to state 12
    body                           shift and go to state 34
    goto                           shift and go to state 5
    unset                          shift and go to state 6
    print                          shift and go to state 7
    exit                           shift and go to state 8
    tag                            shift and go to state 9
    if                             shift and go to state 10
    assign                         shift and go to state 11
    empty                          shift and go to state 13
    var                            shift and go to state 26

state 13

    (10) body -> empty .

    $end            reduce using rule 10 (body -> empty .)


state 14

    (11) goto -> GOTO . NAME SEMICOLON

    NAME            shift and go to state 35


state 15

    (31) tag -> NAME . COLON

    COLON           shift and go to state 36


state 16

    (12) unset -> UNSET . L_PAR TVAR R_PAR SEMICOLON
    (13) unset -> UNSET . L_PAR AVAR R_PAR SEMICOLON
    (14) unset -> UNSET . L_PAR VVAR R_PAR SEMICOLON
    (15) unset -> UNSET . L_PAR SVAR R_PAR SEMICOLON
    (16) unset -> UNSET . L_PAR SPVAR R_PAR SEMICOLON
    (17) unset -> UNSET . L_PAR RAVAR R_PAR SEMICOLON

    L_PAR           shift and go to state 37


state 17

    (61) assign -> TVAR . ASSIGN condition SEMICOLON
    (65) assign -> TVAR . ASSIGN conversion SEMICOLON
    (69) assign -> TVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (73) assign -> TVAR . ASSIGN bitwise SEMICOLON
    (77) assign -> TVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (97) declaration -> TVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (103) declaration -> TVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (54) var -> TVAR .

    ASSIGN          shift and go to state 38
    L_BRACKET       shift and go to state 39
    GOTO            reduce using rule 54 (var -> TVAR .)
    UNSET           reduce using rule 54 (var -> TVAR .)
    PRINT           reduce using rule 54 (var -> TVAR .)
    EXIT            reduce using rule 54 (var -> TVAR .)
    NAME            reduce using rule 54 (var -> TVAR .)
    IF              reduce using rule 54 (var -> TVAR .)
    TVAR            reduce using rule 54 (var -> TVAR .)
    AVAR            reduce using rule 54 (var -> TVAR .)
    VVAR            reduce using rule 54 (var -> TVAR .)
    SVAR            reduce using rule 54 (var -> TVAR .)
    SPVAR           reduce using rule 54 (var -> TVAR .)
    RAVAR           reduce using rule 54 (var -> TVAR .)
    $end            reduce using rule 54 (var -> TVAR .)


state 18

    (62) assign -> AVAR . ASSIGN condition SEMICOLON
    (66) assign -> AVAR . ASSIGN conversion SEMICOLON
    (70) assign -> AVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (74) assign -> AVAR . ASSIGN bitwise SEMICOLON
    (78) assign -> AVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (98) declaration -> AVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (104) declaration -> AVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (55) var -> AVAR .

    ASSIGN          shift and go to state 40
    L_BRACKET       shift and go to state 41
    GOTO            reduce using rule 55 (var -> AVAR .)
    UNSET           reduce using rule 55 (var -> AVAR .)
    PRINT           reduce using rule 55 (var -> AVAR .)
    EXIT            reduce using rule 55 (var -> AVAR .)
    NAME            reduce using rule 55 (var -> AVAR .)
    IF              reduce using rule 55 (var -> AVAR .)
    TVAR            reduce using rule 55 (var -> AVAR .)
    AVAR            reduce using rule 55 (var -> AVAR .)
    VVAR            reduce using rule 55 (var -> AVAR .)
    SVAR            reduce using rule 55 (var -> AVAR .)
    SPVAR           reduce using rule 55 (var -> AVAR .)
    RAVAR           reduce using rule 55 (var -> AVAR .)
    $end            reduce using rule 55 (var -> AVAR .)


state 19

    (63) assign -> VVAR . ASSIGN condition SEMICOLON
    (67) assign -> VVAR . ASSIGN conversion SEMICOLON
    (71) assign -> VVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (75) assign -> VVAR . ASSIGN bitwise SEMICOLON
    (79) assign -> VVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (99) declaration -> VVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (105) declaration -> VVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (56) var -> VVAR .

    ASSIGN          shift and go to state 42
    L_BRACKET       shift and go to state 43
    GOTO            reduce using rule 56 (var -> VVAR .)
    UNSET           reduce using rule 56 (var -> VVAR .)
    PRINT           reduce using rule 56 (var -> VVAR .)
    EXIT            reduce using rule 56 (var -> VVAR .)
    NAME            reduce using rule 56 (var -> VVAR .)
    IF              reduce using rule 56 (var -> VVAR .)
    TVAR            reduce using rule 56 (var -> VVAR .)
    AVAR            reduce using rule 56 (var -> VVAR .)
    VVAR            reduce using rule 56 (var -> VVAR .)
    SVAR            reduce using rule 56 (var -> VVAR .)
    SPVAR           reduce using rule 56 (var -> VVAR .)
    RAVAR           reduce using rule 56 (var -> VVAR .)
    $end            reduce using rule 56 (var -> VVAR .)


state 20

    (64) assign -> SVAR . ASSIGN condition SEMICOLON
    (68) assign -> SVAR . ASSIGN conversion SEMICOLON
    (72) assign -> SVAR . ASSIGN READ L_PAR R_PAR SEMICOLON
    (76) assign -> SVAR . ASSIGN bitwise SEMICOLON
    (80) assign -> SVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (100) declaration -> SVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (106) declaration -> SVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (57) var -> SVAR .

    ASSIGN          shift and go to state 44
    L_BRACKET       shift and go to state 45
    GOTO            reduce using rule 57 (var -> SVAR .)
    UNSET           reduce using rule 57 (var -> SVAR .)
    PRINT           reduce using rule 57 (var -> SVAR .)
    EXIT            reduce using rule 57 (var -> SVAR .)
    NAME            reduce using rule 57 (var -> SVAR .)
    IF              reduce using rule 57 (var -> SVAR .)
    TVAR            reduce using rule 57 (var -> SVAR .)
    AVAR            reduce using rule 57 (var -> SVAR .)
    VVAR            reduce using rule 57 (var -> SVAR .)
    SVAR            reduce using rule 57 (var -> SVAR .)
    SPVAR           reduce using rule 57 (var -> SVAR .)
    RAVAR           reduce using rule 57 (var -> SVAR .)
    $end            reduce using rule 57 (var -> SVAR .)


state 21

    (81) assign -> SPVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (101) declaration -> SPVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (107) declaration -> SPVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (59) var -> SPVAR .

    L_BRACKET       shift and go to state 46
    ASSIGN          shift and go to state 47
    GOTO            reduce using rule 59 (var -> SPVAR .)
    UNSET           reduce using rule 59 (var -> SPVAR .)
    PRINT           reduce using rule 59 (var -> SPVAR .)
    EXIT            reduce using rule 59 (var -> SPVAR .)
    NAME            reduce using rule 59 (var -> SPVAR .)
    IF              reduce using rule 59 (var -> SPVAR .)
    TVAR            reduce using rule 59 (var -> SPVAR .)
    AVAR            reduce using rule 59 (var -> SPVAR .)
    VVAR            reduce using rule 59 (var -> SPVAR .)
    SVAR            reduce using rule 59 (var -> SPVAR .)
    SPVAR           reduce using rule 59 (var -> SPVAR .)
    RAVAR           reduce using rule 59 (var -> SPVAR .)
    $end            reduce using rule 59 (var -> SPVAR .)


state 22

    (82) assign -> RAVAR . L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (102) declaration -> RAVAR . ASSIGN ARRAY L_PAR R_PAR SEMICOLON
    (108) declaration -> RAVAR . L_BRACKET arithmetic R_BRACKET SEMICOLON
    (58) var -> RAVAR .

    L_BRACKET       shift and go to state 48
    ASSIGN          shift and go to state 49
    GOTO            reduce using rule 58 (var -> RAVAR .)
    UNSET           reduce using rule 58 (var -> RAVAR .)
    PRINT           reduce using rule 58 (var -> RAVAR .)
    EXIT            reduce using rule 58 (var -> RAVAR .)
    NAME            reduce using rule 58 (var -> RAVAR .)
    IF              reduce using rule 58 (var -> RAVAR .)
    TVAR            reduce using rule 58 (var -> RAVAR .)
    AVAR            reduce using rule 58 (var -> RAVAR .)
    VVAR            reduce using rule 58 (var -> RAVAR .)
    SVAR            reduce using rule 58 (var -> RAVAR .)
    SPVAR           reduce using rule 58 (var -> RAVAR .)
    RAVAR           reduce using rule 58 (var -> RAVAR .)
    $end            reduce using rule 58 (var -> RAVAR .)


state 23

    (18) print -> PRINT . L_PAR TVAR R_PAR SEMICOLON
    (19) print -> PRINT . L_PAR AVAR R_PAR SEMICOLON
    (20) print -> PRINT . L_PAR VVAR R_PAR SEMICOLON
    (21) print -> PRINT . L_PAR SVAR R_PAR SEMICOLON
    (22) print -> PRINT . L_PAR SPVAR R_PAR SEMICOLON
    (23) print -> PRINT . L_PAR RAVAR R_PAR SEMICOLON
    (24) print -> PRINT . L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> PRINT . L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> PRINT . L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> PRINT . L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> PRINT . L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> PRINT . L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    L_PAR           shift and go to state 50


state 24

    (30) exit -> EXIT . SEMICOLON

    SEMICOLON       shift and go to state 51


state 25

    (32) if -> IF . L_PAR condition R_PAR GOTO NAME SEMICOLON

    L_PAR           shift and go to state 52


state 26

    (96) declaration -> var .

    GOTO            reduce using rule 96 (declaration -> var .)
    UNSET           reduce using rule 96 (declaration -> var .)
    PRINT           reduce using rule 96 (declaration -> var .)
    EXIT            reduce using rule 96 (declaration -> var .)
    NAME            reduce using rule 96 (declaration -> var .)
    IF              reduce using rule 96 (declaration -> var .)
    TVAR            reduce using rule 96 (declaration -> var .)
    AVAR            reduce using rule 96 (declaration -> var .)
    VVAR            reduce using rule 96 (declaration -> var .)
    SVAR            reduce using rule 96 (declaration -> var .)
    SPVAR           reduce using rule 96 (declaration -> var .)
    RAVAR           reduce using rule 96 (declaration -> var .)
    $end            reduce using rule 96 (declaration -> var .)


state 27

    (2) body -> goto body .

    $end            reduce using rule 2 (body -> goto body .)


state 28

    (3) body -> unset body .

    $end            reduce using rule 3 (body -> unset body .)


state 29

    (4) body -> print body .

    $end            reduce using rule 4 (body -> print body .)


state 30

    (5) body -> exit body .

    $end            reduce using rule 5 (body -> exit body .)


state 31

    (6) body -> tag body .

    $end            reduce using rule 6 (body -> tag body .)


state 32

    (7) body -> if body .

    $end            reduce using rule 7 (body -> if body .)


state 33

    (8) body -> assign body .

    $end            reduce using rule 8 (body -> assign body .)


state 34

    (9) body -> declaration body .

    $end            reduce using rule 9 (body -> declaration body .)


state 35

    (11) goto -> GOTO NAME . SEMICOLON

    SEMICOLON       shift and go to state 53


state 36

    (31) tag -> NAME COLON .

    GOTO            reduce using rule 31 (tag -> NAME COLON .)
    UNSET           reduce using rule 31 (tag -> NAME COLON .)
    PRINT           reduce using rule 31 (tag -> NAME COLON .)
    EXIT            reduce using rule 31 (tag -> NAME COLON .)
    NAME            reduce using rule 31 (tag -> NAME COLON .)
    IF              reduce using rule 31 (tag -> NAME COLON .)
    TVAR            reduce using rule 31 (tag -> NAME COLON .)
    AVAR            reduce using rule 31 (tag -> NAME COLON .)
    VVAR            reduce using rule 31 (tag -> NAME COLON .)
    SVAR            reduce using rule 31 (tag -> NAME COLON .)
    SPVAR           reduce using rule 31 (tag -> NAME COLON .)
    RAVAR           reduce using rule 31 (tag -> NAME COLON .)
    $end            reduce using rule 31 (tag -> NAME COLON .)


state 37

    (12) unset -> UNSET L_PAR . TVAR R_PAR SEMICOLON
    (13) unset -> UNSET L_PAR . AVAR R_PAR SEMICOLON
    (14) unset -> UNSET L_PAR . VVAR R_PAR SEMICOLON
    (15) unset -> UNSET L_PAR . SVAR R_PAR SEMICOLON
    (16) unset -> UNSET L_PAR . SPVAR R_PAR SEMICOLON
    (17) unset -> UNSET L_PAR . RAVAR R_PAR SEMICOLON

    TVAR            shift and go to state 54
    AVAR            shift and go to state 55
    VVAR            shift and go to state 56
    SVAR            shift and go to state 57
    SPVAR           shift and go to state 58
    RAVAR           shift and go to state 59


state 38

    (61) assign -> TVAR ASSIGN . condition SEMICOLON
    (65) assign -> TVAR ASSIGN . conversion SEMICOLON
    (69) assign -> TVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (73) assign -> TVAR ASSIGN . bitwise SEMICOLON
    (97) declaration -> TVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (92) conversion -> . L_PAR type R_PAR var
    (83) bitwise -> . var AND_B var
    (84) bitwise -> . var OR_B var
    (85) bitwise -> . var XOR_B var
    (86) bitwise -> . var SHIFT_L var
    (87) bitwise -> . var SHIFT_R var
    (88) bitwise -> . NOT_B TVAR
    (89) bitwise -> . NOT_B AVAR
    (90) bitwise -> . NOT_B VVAR
    (91) bitwise -> . NOT_B SVAR
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (60) array_access -> .

    READ            shift and go to state 63
    ARRAY           shift and go to state 66
    NOT             shift and go to state 67
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 70
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 61
    conversion                     shift and go to state 62
    bitwise                        shift and go to state 65
    relational                     shift and go to state 68
    var                            shift and go to state 69
    arithmetic                     shift and go to state 74
    array_access                   shift and go to state 80

state 39

    (77) assign -> TVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (103) declaration -> TVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 81
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 40

    (62) assign -> AVAR ASSIGN . condition SEMICOLON
    (66) assign -> AVAR ASSIGN . conversion SEMICOLON
    (70) assign -> AVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (74) assign -> AVAR ASSIGN . bitwise SEMICOLON
    (98) declaration -> AVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (92) conversion -> . L_PAR type R_PAR var
    (83) bitwise -> . var AND_B var
    (84) bitwise -> . var OR_B var
    (85) bitwise -> . var XOR_B var
    (86) bitwise -> . var SHIFT_L var
    (87) bitwise -> . var SHIFT_R var
    (88) bitwise -> . NOT_B TVAR
    (89) bitwise -> . NOT_B AVAR
    (90) bitwise -> . NOT_B VVAR
    (91) bitwise -> . NOT_B SVAR
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (60) array_access -> .

    READ            shift and go to state 85
    ARRAY           shift and go to state 87
    NOT             shift and go to state 67
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 70
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 83
    conversion                     shift and go to state 84
    bitwise                        shift and go to state 86
    relational                     shift and go to state 68
    var                            shift and go to state 69
    arithmetic                     shift and go to state 74
    array_access                   shift and go to state 80

state 41

    (78) assign -> AVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (104) declaration -> AVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 88
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 42

    (63) assign -> VVAR ASSIGN . condition SEMICOLON
    (67) assign -> VVAR ASSIGN . conversion SEMICOLON
    (71) assign -> VVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (75) assign -> VVAR ASSIGN . bitwise SEMICOLON
    (99) declaration -> VVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (92) conversion -> . L_PAR type R_PAR var
    (83) bitwise -> . var AND_B var
    (84) bitwise -> . var OR_B var
    (85) bitwise -> . var XOR_B var
    (86) bitwise -> . var SHIFT_L var
    (87) bitwise -> . var SHIFT_R var
    (88) bitwise -> . NOT_B TVAR
    (89) bitwise -> . NOT_B AVAR
    (90) bitwise -> . NOT_B VVAR
    (91) bitwise -> . NOT_B SVAR
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (60) array_access -> .

    READ            shift and go to state 91
    ARRAY           shift and go to state 93
    NOT             shift and go to state 67
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 70
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 89
    conversion                     shift and go to state 90
    bitwise                        shift and go to state 92
    relational                     shift and go to state 68
    var                            shift and go to state 69
    arithmetic                     shift and go to state 74
    array_access                   shift and go to state 80

state 43

    (79) assign -> VVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (105) declaration -> VVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 94
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 44

    (64) assign -> SVAR ASSIGN . condition SEMICOLON
    (68) assign -> SVAR ASSIGN . conversion SEMICOLON
    (72) assign -> SVAR ASSIGN . READ L_PAR R_PAR SEMICOLON
    (76) assign -> SVAR ASSIGN . bitwise SEMICOLON
    (100) declaration -> SVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (92) conversion -> . L_PAR type R_PAR var
    (83) bitwise -> . var AND_B var
    (84) bitwise -> . var OR_B var
    (85) bitwise -> . var XOR_B var
    (86) bitwise -> . var SHIFT_L var
    (87) bitwise -> . var SHIFT_R var
    (88) bitwise -> . NOT_B TVAR
    (89) bitwise -> . NOT_B AVAR
    (90) bitwise -> . NOT_B VVAR
    (91) bitwise -> . NOT_B SVAR
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (60) array_access -> .

    READ            shift and go to state 97
    ARRAY           shift and go to state 99
    NOT             shift and go to state 67
    L_PAR           shift and go to state 64
    NOT_B           shift and go to state 70
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 95
    conversion                     shift and go to state 96
    bitwise                        shift and go to state 98
    relational                     shift and go to state 68
    var                            shift and go to state 69
    arithmetic                     shift and go to state 74
    array_access                   shift and go to state 80

state 45

    (80) assign -> SVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (106) declaration -> SVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 100
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 46

    (81) assign -> SPVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (107) declaration -> SPVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 101
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 47

    (101) declaration -> SPVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON

    ARRAY           shift and go to state 102


state 48

    (82) assign -> RAVAR L_BRACKET . arithmetic R_BRACKET ASSIGN condition SEMICOLON
    (108) declaration -> RAVAR L_BRACKET . arithmetic R_BRACKET SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 103
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 49

    (102) declaration -> RAVAR ASSIGN . ARRAY L_PAR R_PAR SEMICOLON

    ARRAY           shift and go to state 104


state 50

    (18) print -> PRINT L_PAR . TVAR R_PAR SEMICOLON
    (19) print -> PRINT L_PAR . AVAR R_PAR SEMICOLON
    (20) print -> PRINT L_PAR . VVAR R_PAR SEMICOLON
    (21) print -> PRINT L_PAR . SVAR R_PAR SEMICOLON
    (22) print -> PRINT L_PAR . SPVAR R_PAR SEMICOLON
    (23) print -> PRINT L_PAR . RAVAR R_PAR SEMICOLON
    (24) print -> PRINT L_PAR . TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (25) print -> PRINT L_PAR . AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (26) print -> PRINT L_PAR . VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (27) print -> PRINT L_PAR . SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (28) print -> PRINT L_PAR . SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON
    (29) print -> PRINT L_PAR . RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    TVAR            shift and go to state 105
    AVAR            shift and go to state 106
    VVAR            shift and go to state 107
    SVAR            shift and go to state 108
    SPVAR           shift and go to state 109
    RAVAR           shift and go to state 110


state 51

    (30) exit -> EXIT SEMICOLON .

    GOTO            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    UNSET           reduce using rule 30 (exit -> EXIT SEMICOLON .)
    PRINT           reduce using rule 30 (exit -> EXIT SEMICOLON .)
    EXIT            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    NAME            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    IF              reduce using rule 30 (exit -> EXIT SEMICOLON .)
    TVAR            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    AVAR            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    VVAR            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    SVAR            reduce using rule 30 (exit -> EXIT SEMICOLON .)
    SPVAR           reduce using rule 30 (exit -> EXIT SEMICOLON .)
    RAVAR           reduce using rule 30 (exit -> EXIT SEMICOLON .)
    $end            reduce using rule 30 (exit -> EXIT SEMICOLON .)


state 52

    (32) if -> IF L_PAR . condition R_PAR GOTO NAME SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 111
    relational                     shift and go to state 68
    arithmetic                     shift and go to state 74
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 53

    (11) goto -> GOTO NAME SEMICOLON .

    GOTO            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    UNSET           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    PRINT           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    EXIT            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    NAME            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    IF              reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    TVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    AVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    VVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    SVAR            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    SPVAR           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    RAVAR           reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)
    $end            reduce using rule 11 (goto -> GOTO NAME SEMICOLON .)


state 54

    (12) unset -> UNSET L_PAR TVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 112


state 55

    (13) unset -> UNSET L_PAR AVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 113


state 56

    (14) unset -> UNSET L_PAR VVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 114


state 57

    (15) unset -> UNSET L_PAR SVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 115


state 58

    (16) unset -> UNSET L_PAR SPVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 116


state 59

    (17) unset -> UNSET L_PAR RAVAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 117


state 60

    (54) var -> TVAR .

    AND_B           reduce using rule 54 (var -> TVAR .)
    OR_B            reduce using rule 54 (var -> TVAR .)
    XOR_B           reduce using rule 54 (var -> TVAR .)
    SHIFT_L         reduce using rule 54 (var -> TVAR .)
    SHIFT_R         reduce using rule 54 (var -> TVAR .)
    EQUAL           reduce using rule 54 (var -> TVAR .)
    NOT_EQUAL       reduce using rule 54 (var -> TVAR .)
    GREATER         reduce using rule 54 (var -> TVAR .)
    LESS            reduce using rule 54 (var -> TVAR .)
    GREATER_EQUAL   reduce using rule 54 (var -> TVAR .)
    LESS_EQUAL      reduce using rule 54 (var -> TVAR .)
    PLUS            reduce using rule 54 (var -> TVAR .)
    MINUS           reduce using rule 54 (var -> TVAR .)
    MULTIPLY        reduce using rule 54 (var -> TVAR .)
    DIVIDE          reduce using rule 54 (var -> TVAR .)
    REMAINDER       reduce using rule 54 (var -> TVAR .)
    SEMICOLON       reduce using rule 54 (var -> TVAR .)
    AND             reduce using rule 54 (var -> TVAR .)
    OR              reduce using rule 54 (var -> TVAR .)
    R_BRACKET       reduce using rule 54 (var -> TVAR .)
    R_PAR           reduce using rule 54 (var -> TVAR .)


state 61

    (61) assign -> TVAR ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 118
    AND             shift and go to state 119
    OR              shift and go to state 120


state 62

    (65) assign -> TVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 121


state 63

    (69) assign -> TVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 122


state 64

    (92) conversion -> L_PAR . type R_PAR var
    (93) type -> . INT
    (94) type -> . FLOAT
    (95) type -> . CHAR

    INT             shift and go to state 124
    FLOAT           shift and go to state 125
    CHAR            shift and go to state 126

    type                           shift and go to state 123

state 65

    (73) assign -> TVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 127


state 66

    (97) declaration -> TVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 128


state 67

    (35) condition -> NOT . condition
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 129
    relational                     shift and go to state 68
    arithmetic                     shift and go to state 74
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 68

    (36) condition -> relational .

    SEMICOLON       reduce using rule 36 (condition -> relational .)
    AND             reduce using rule 36 (condition -> relational .)
    OR              reduce using rule 36 (condition -> relational .)
    R_PAR           reduce using rule 36 (condition -> relational .)


state 69

    (83) bitwise -> var . AND_B var
    (84) bitwise -> var . OR_B var
    (85) bitwise -> var . XOR_B var
    (86) bitwise -> var . SHIFT_L var
    (87) bitwise -> var . SHIFT_R var
    (52) arithmetic -> var .

    AND_B           shift and go to state 130
    OR_B            shift and go to state 131
    XOR_B           shift and go to state 132
    SHIFT_L         shift and go to state 133
    SHIFT_R         shift and go to state 134
    EQUAL           reduce using rule 52 (arithmetic -> var .)
    NOT_EQUAL       reduce using rule 52 (arithmetic -> var .)
    GREATER         reduce using rule 52 (arithmetic -> var .)
    LESS            reduce using rule 52 (arithmetic -> var .)
    GREATER_EQUAL   reduce using rule 52 (arithmetic -> var .)
    LESS_EQUAL      reduce using rule 52 (arithmetic -> var .)
    PLUS            reduce using rule 52 (arithmetic -> var .)
    MINUS           reduce using rule 52 (arithmetic -> var .)
    MULTIPLY        reduce using rule 52 (arithmetic -> var .)
    DIVIDE          reduce using rule 52 (arithmetic -> var .)
    REMAINDER       reduce using rule 52 (arithmetic -> var .)
    SEMICOLON       reduce using rule 52 (arithmetic -> var .)
    AND             reduce using rule 52 (arithmetic -> var .)
    OR              reduce using rule 52 (arithmetic -> var .)


state 70

    (88) bitwise -> NOT_B . TVAR
    (89) bitwise -> NOT_B . AVAR
    (90) bitwise -> NOT_B . VVAR
    (91) bitwise -> NOT_B . SVAR

    TVAR            shift and go to state 135
    AVAR            shift and go to state 136
    VVAR            shift and go to state 137
    SVAR            shift and go to state 138


state 71

    (55) var -> AVAR .

    AND_B           reduce using rule 55 (var -> AVAR .)
    OR_B            reduce using rule 55 (var -> AVAR .)
    XOR_B           reduce using rule 55 (var -> AVAR .)
    SHIFT_L         reduce using rule 55 (var -> AVAR .)
    SHIFT_R         reduce using rule 55 (var -> AVAR .)
    EQUAL           reduce using rule 55 (var -> AVAR .)
    NOT_EQUAL       reduce using rule 55 (var -> AVAR .)
    GREATER         reduce using rule 55 (var -> AVAR .)
    LESS            reduce using rule 55 (var -> AVAR .)
    GREATER_EQUAL   reduce using rule 55 (var -> AVAR .)
    LESS_EQUAL      reduce using rule 55 (var -> AVAR .)
    PLUS            reduce using rule 55 (var -> AVAR .)
    MINUS           reduce using rule 55 (var -> AVAR .)
    MULTIPLY        reduce using rule 55 (var -> AVAR .)
    DIVIDE          reduce using rule 55 (var -> AVAR .)
    REMAINDER       reduce using rule 55 (var -> AVAR .)
    SEMICOLON       reduce using rule 55 (var -> AVAR .)
    AND             reduce using rule 55 (var -> AVAR .)
    OR              reduce using rule 55 (var -> AVAR .)
    R_BRACKET       reduce using rule 55 (var -> AVAR .)
    R_PAR           reduce using rule 55 (var -> AVAR .)


state 72

    (56) var -> VVAR .

    AND_B           reduce using rule 56 (var -> VVAR .)
    OR_B            reduce using rule 56 (var -> VVAR .)
    XOR_B           reduce using rule 56 (var -> VVAR .)
    SHIFT_L         reduce using rule 56 (var -> VVAR .)
    SHIFT_R         reduce using rule 56 (var -> VVAR .)
    EQUAL           reduce using rule 56 (var -> VVAR .)
    NOT_EQUAL       reduce using rule 56 (var -> VVAR .)
    GREATER         reduce using rule 56 (var -> VVAR .)
    LESS            reduce using rule 56 (var -> VVAR .)
    GREATER_EQUAL   reduce using rule 56 (var -> VVAR .)
    LESS_EQUAL      reduce using rule 56 (var -> VVAR .)
    PLUS            reduce using rule 56 (var -> VVAR .)
    MINUS           reduce using rule 56 (var -> VVAR .)
    MULTIPLY        reduce using rule 56 (var -> VVAR .)
    DIVIDE          reduce using rule 56 (var -> VVAR .)
    REMAINDER       reduce using rule 56 (var -> VVAR .)
    SEMICOLON       reduce using rule 56 (var -> VVAR .)
    AND             reduce using rule 56 (var -> VVAR .)
    OR              reduce using rule 56 (var -> VVAR .)
    R_BRACKET       reduce using rule 56 (var -> VVAR .)
    R_PAR           reduce using rule 56 (var -> VVAR .)


state 73

    (57) var -> SVAR .

    AND_B           reduce using rule 57 (var -> SVAR .)
    OR_B            reduce using rule 57 (var -> SVAR .)
    XOR_B           reduce using rule 57 (var -> SVAR .)
    SHIFT_L         reduce using rule 57 (var -> SVAR .)
    SHIFT_R         reduce using rule 57 (var -> SVAR .)
    EQUAL           reduce using rule 57 (var -> SVAR .)
    NOT_EQUAL       reduce using rule 57 (var -> SVAR .)
    GREATER         reduce using rule 57 (var -> SVAR .)
    LESS            reduce using rule 57 (var -> SVAR .)
    GREATER_EQUAL   reduce using rule 57 (var -> SVAR .)
    LESS_EQUAL      reduce using rule 57 (var -> SVAR .)
    PLUS            reduce using rule 57 (var -> SVAR .)
    MINUS           reduce using rule 57 (var -> SVAR .)
    MULTIPLY        reduce using rule 57 (var -> SVAR .)
    DIVIDE          reduce using rule 57 (var -> SVAR .)
    REMAINDER       reduce using rule 57 (var -> SVAR .)
    SEMICOLON       reduce using rule 57 (var -> SVAR .)
    AND             reduce using rule 57 (var -> SVAR .)
    OR              reduce using rule 57 (var -> SVAR .)
    R_BRACKET       reduce using rule 57 (var -> SVAR .)
    R_PAR           reduce using rule 57 (var -> SVAR .)


state 74

    (37) relational -> arithmetic . EQUAL arithmetic
    (38) relational -> arithmetic . NOT_EQUAL arithmetic
    (39) relational -> arithmetic . GREATER arithmetic
    (40) relational -> arithmetic . LESS arithmetic
    (41) relational -> arithmetic . GREATER_EQUAL arithmetic
    (42) relational -> arithmetic . LESS_EQUAL arithmetic
    (43) relational -> arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           shift and go to state 139
    NOT_EQUAL       shift and go to state 140
    GREATER         shift and go to state 141
    LESS            shift and go to state 142
    GREATER_EQUAL   shift and go to state 143
    LESS_EQUAL      shift and go to state 144
    SEMICOLON       reduce using rule 43 (relational -> arithmetic .)
    AND             reduce using rule 43 (relational -> arithmetic .)
    OR              reduce using rule 43 (relational -> arithmetic .)
    R_PAR           reduce using rule 43 (relational -> arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 75

    (58) var -> RAVAR .

    AND_B           reduce using rule 58 (var -> RAVAR .)
    OR_B            reduce using rule 58 (var -> RAVAR .)
    XOR_B           reduce using rule 58 (var -> RAVAR .)
    SHIFT_L         reduce using rule 58 (var -> RAVAR .)
    SHIFT_R         reduce using rule 58 (var -> RAVAR .)
    EQUAL           reduce using rule 58 (var -> RAVAR .)
    NOT_EQUAL       reduce using rule 58 (var -> RAVAR .)
    GREATER         reduce using rule 58 (var -> RAVAR .)
    LESS            reduce using rule 58 (var -> RAVAR .)
    GREATER_EQUAL   reduce using rule 58 (var -> RAVAR .)
    LESS_EQUAL      reduce using rule 58 (var -> RAVAR .)
    PLUS            reduce using rule 58 (var -> RAVAR .)
    MINUS           reduce using rule 58 (var -> RAVAR .)
    MULTIPLY        reduce using rule 58 (var -> RAVAR .)
    DIVIDE          reduce using rule 58 (var -> RAVAR .)
    REMAINDER       reduce using rule 58 (var -> RAVAR .)
    SEMICOLON       reduce using rule 58 (var -> RAVAR .)
    AND             reduce using rule 58 (var -> RAVAR .)
    OR              reduce using rule 58 (var -> RAVAR .)
    R_BRACKET       reduce using rule 58 (var -> RAVAR .)
    R_PAR           reduce using rule 58 (var -> RAVAR .)


state 76

    (59) var -> SPVAR .

    AND_B           reduce using rule 59 (var -> SPVAR .)
    OR_B            reduce using rule 59 (var -> SPVAR .)
    XOR_B           reduce using rule 59 (var -> SPVAR .)
    SHIFT_L         reduce using rule 59 (var -> SPVAR .)
    SHIFT_R         reduce using rule 59 (var -> SPVAR .)
    EQUAL           reduce using rule 59 (var -> SPVAR .)
    NOT_EQUAL       reduce using rule 59 (var -> SPVAR .)
    GREATER         reduce using rule 59 (var -> SPVAR .)
    LESS            reduce using rule 59 (var -> SPVAR .)
    GREATER_EQUAL   reduce using rule 59 (var -> SPVAR .)
    LESS_EQUAL      reduce using rule 59 (var -> SPVAR .)
    PLUS            reduce using rule 59 (var -> SPVAR .)
    MINUS           reduce using rule 59 (var -> SPVAR .)
    MULTIPLY        reduce using rule 59 (var -> SPVAR .)
    DIVIDE          reduce using rule 59 (var -> SPVAR .)
    REMAINDER       reduce using rule 59 (var -> SPVAR .)
    SEMICOLON       reduce using rule 59 (var -> SPVAR .)
    AND             reduce using rule 59 (var -> SPVAR .)
    OR              reduce using rule 59 (var -> SPVAR .)
    R_BRACKET       reduce using rule 59 (var -> SPVAR .)
    R_PAR           reduce using rule 59 (var -> SPVAR .)


state 77

    (49) arithmetic -> INTEGER .

    EQUAL           reduce using rule 49 (arithmetic -> INTEGER .)
    NOT_EQUAL       reduce using rule 49 (arithmetic -> INTEGER .)
    GREATER         reduce using rule 49 (arithmetic -> INTEGER .)
    LESS            reduce using rule 49 (arithmetic -> INTEGER .)
    GREATER_EQUAL   reduce using rule 49 (arithmetic -> INTEGER .)
    LESS_EQUAL      reduce using rule 49 (arithmetic -> INTEGER .)
    PLUS            reduce using rule 49 (arithmetic -> INTEGER .)
    MINUS           reduce using rule 49 (arithmetic -> INTEGER .)
    MULTIPLY        reduce using rule 49 (arithmetic -> INTEGER .)
    DIVIDE          reduce using rule 49 (arithmetic -> INTEGER .)
    REMAINDER       reduce using rule 49 (arithmetic -> INTEGER .)
    SEMICOLON       reduce using rule 49 (arithmetic -> INTEGER .)
    AND             reduce using rule 49 (arithmetic -> INTEGER .)
    OR              reduce using rule 49 (arithmetic -> INTEGER .)
    R_BRACKET       reduce using rule 49 (arithmetic -> INTEGER .)
    R_PAR           reduce using rule 49 (arithmetic -> INTEGER .)


state 78

    (50) arithmetic -> DECIMAL .

    EQUAL           reduce using rule 50 (arithmetic -> DECIMAL .)
    NOT_EQUAL       reduce using rule 50 (arithmetic -> DECIMAL .)
    GREATER         reduce using rule 50 (arithmetic -> DECIMAL .)
    LESS            reduce using rule 50 (arithmetic -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 50 (arithmetic -> DECIMAL .)
    LESS_EQUAL      reduce using rule 50 (arithmetic -> DECIMAL .)
    PLUS            reduce using rule 50 (arithmetic -> DECIMAL .)
    MINUS           reduce using rule 50 (arithmetic -> DECIMAL .)
    MULTIPLY        reduce using rule 50 (arithmetic -> DECIMAL .)
    DIVIDE          reduce using rule 50 (arithmetic -> DECIMAL .)
    REMAINDER       reduce using rule 50 (arithmetic -> DECIMAL .)
    SEMICOLON       reduce using rule 50 (arithmetic -> DECIMAL .)
    AND             reduce using rule 50 (arithmetic -> DECIMAL .)
    OR              reduce using rule 50 (arithmetic -> DECIMAL .)
    R_BRACKET       reduce using rule 50 (arithmetic -> DECIMAL .)
    R_PAR           reduce using rule 50 (arithmetic -> DECIMAL .)


state 79

    (51) arithmetic -> STRING .

    EQUAL           reduce using rule 51 (arithmetic -> STRING .)
    NOT_EQUAL       reduce using rule 51 (arithmetic -> STRING .)
    GREATER         reduce using rule 51 (arithmetic -> STRING .)
    LESS            reduce using rule 51 (arithmetic -> STRING .)
    GREATER_EQUAL   reduce using rule 51 (arithmetic -> STRING .)
    LESS_EQUAL      reduce using rule 51 (arithmetic -> STRING .)
    PLUS            reduce using rule 51 (arithmetic -> STRING .)
    MINUS           reduce using rule 51 (arithmetic -> STRING .)
    MULTIPLY        reduce using rule 51 (arithmetic -> STRING .)
    DIVIDE          reduce using rule 51 (arithmetic -> STRING .)
    REMAINDER       reduce using rule 51 (arithmetic -> STRING .)
    SEMICOLON       reduce using rule 51 (arithmetic -> STRING .)
    AND             reduce using rule 51 (arithmetic -> STRING .)
    OR              reduce using rule 51 (arithmetic -> STRING .)
    R_BRACKET       reduce using rule 51 (arithmetic -> STRING .)
    R_PAR           reduce using rule 51 (arithmetic -> STRING .)


state 80

    (53) arithmetic -> array_access .

    EQUAL           reduce using rule 53 (arithmetic -> array_access .)
    NOT_EQUAL       reduce using rule 53 (arithmetic -> array_access .)
    GREATER         reduce using rule 53 (arithmetic -> array_access .)
    LESS            reduce using rule 53 (arithmetic -> array_access .)
    GREATER_EQUAL   reduce using rule 53 (arithmetic -> array_access .)
    LESS_EQUAL      reduce using rule 53 (arithmetic -> array_access .)
    PLUS            reduce using rule 53 (arithmetic -> array_access .)
    MINUS           reduce using rule 53 (arithmetic -> array_access .)
    MULTIPLY        reduce using rule 53 (arithmetic -> array_access .)
    DIVIDE          reduce using rule 53 (arithmetic -> array_access .)
    REMAINDER       reduce using rule 53 (arithmetic -> array_access .)
    SEMICOLON       reduce using rule 53 (arithmetic -> array_access .)
    AND             reduce using rule 53 (arithmetic -> array_access .)
    OR              reduce using rule 53 (arithmetic -> array_access .)
    R_BRACKET       reduce using rule 53 (arithmetic -> array_access .)
    R_PAR           reduce using rule 53 (arithmetic -> array_access .)


state 81

    (77) assign -> TVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (103) declaration -> TVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 150
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 82

    (52) arithmetic -> var .

    R_BRACKET       reduce using rule 52 (arithmetic -> var .)
    PLUS            reduce using rule 52 (arithmetic -> var .)
    MINUS           reduce using rule 52 (arithmetic -> var .)
    MULTIPLY        reduce using rule 52 (arithmetic -> var .)
    DIVIDE          reduce using rule 52 (arithmetic -> var .)
    REMAINDER       reduce using rule 52 (arithmetic -> var .)
    EQUAL           reduce using rule 52 (arithmetic -> var .)
    NOT_EQUAL       reduce using rule 52 (arithmetic -> var .)
    GREATER         reduce using rule 52 (arithmetic -> var .)
    LESS            reduce using rule 52 (arithmetic -> var .)
    GREATER_EQUAL   reduce using rule 52 (arithmetic -> var .)
    LESS_EQUAL      reduce using rule 52 (arithmetic -> var .)
    R_PAR           reduce using rule 52 (arithmetic -> var .)
    AND             reduce using rule 52 (arithmetic -> var .)
    OR              reduce using rule 52 (arithmetic -> var .)
    SEMICOLON       reduce using rule 52 (arithmetic -> var .)


state 83

    (62) assign -> AVAR ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 151
    AND             shift and go to state 119
    OR              shift and go to state 120


state 84

    (66) assign -> AVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 152


state 85

    (70) assign -> AVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 153


state 86

    (74) assign -> AVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 154


state 87

    (98) declaration -> AVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 155


state 88

    (78) assign -> AVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (104) declaration -> AVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 156
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 89

    (63) assign -> VVAR ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 157
    AND             shift and go to state 119
    OR              shift and go to state 120


state 90

    (67) assign -> VVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 158


state 91

    (71) assign -> VVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 159


state 92

    (75) assign -> VVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 160


state 93

    (99) declaration -> VVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 161


state 94

    (79) assign -> VVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (105) declaration -> VVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 162
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 95

    (64) assign -> SVAR ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 163
    AND             shift and go to state 119
    OR              shift and go to state 120


state 96

    (68) assign -> SVAR ASSIGN conversion . SEMICOLON

    SEMICOLON       shift and go to state 164


state 97

    (72) assign -> SVAR ASSIGN READ . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 165


state 98

    (76) assign -> SVAR ASSIGN bitwise . SEMICOLON

    SEMICOLON       shift and go to state 166


state 99

    (100) declaration -> SVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 167


state 100

    (80) assign -> SVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (106) declaration -> SVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 168
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 101

    (81) assign -> SPVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (107) declaration -> SPVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 169
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 102

    (101) declaration -> SPVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 170


state 103

    (82) assign -> RAVAR L_BRACKET arithmetic . R_BRACKET ASSIGN condition SEMICOLON
    (108) declaration -> RAVAR L_BRACKET arithmetic . R_BRACKET SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 171
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 104

    (102) declaration -> RAVAR ASSIGN ARRAY . L_PAR R_PAR SEMICOLON

    L_PAR           shift and go to state 172


state 105

    (18) print -> PRINT L_PAR TVAR . R_PAR SEMICOLON
    (24) print -> PRINT L_PAR TVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 173
    L_BRACKET       shift and go to state 174


state 106

    (19) print -> PRINT L_PAR AVAR . R_PAR SEMICOLON
    (25) print -> PRINT L_PAR AVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 175
    L_BRACKET       shift and go to state 176


state 107

    (20) print -> PRINT L_PAR VVAR . R_PAR SEMICOLON
    (26) print -> PRINT L_PAR VVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 177
    L_BRACKET       shift and go to state 178


state 108

    (21) print -> PRINT L_PAR SVAR . R_PAR SEMICOLON
    (27) print -> PRINT L_PAR SVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 179
    L_BRACKET       shift and go to state 180


state 109

    (22) print -> PRINT L_PAR SPVAR . R_PAR SEMICOLON
    (28) print -> PRINT L_PAR SPVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 181
    L_BRACKET       shift and go to state 182


state 110

    (23) print -> PRINT L_PAR RAVAR . R_PAR SEMICOLON
    (29) print -> PRINT L_PAR RAVAR . L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON

    R_PAR           shift and go to state 183
    L_BRACKET       shift and go to state 184


state 111

    (32) if -> IF L_PAR condition . R_PAR GOTO NAME SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    R_PAR           shift and go to state 185
    AND             shift and go to state 119
    OR              shift and go to state 120


state 112

    (12) unset -> UNSET L_PAR TVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 186


state 113

    (13) unset -> UNSET L_PAR AVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 187


state 114

    (14) unset -> UNSET L_PAR VVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 188


state 115

    (15) unset -> UNSET L_PAR SVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 189


state 116

    (16) unset -> UNSET L_PAR SPVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 190


state 117

    (17) unset -> UNSET L_PAR RAVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 191


state 118

    (61) assign -> TVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 61 (assign -> TVAR ASSIGN condition SEMICOLON .)


state 119

    (33) condition -> condition AND . condition
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 192
    relational                     shift and go to state 68
    arithmetic                     shift and go to state 74
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 120

    (34) condition -> condition OR . condition
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    condition                      shift and go to state 193
    relational                     shift and go to state 68
    arithmetic                     shift and go to state 74
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 121

    (65) assign -> TVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 65 (assign -> TVAR ASSIGN conversion SEMICOLON .)


state 122

    (69) assign -> TVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 194


state 123

    (92) conversion -> L_PAR type . R_PAR var

    R_PAR           shift and go to state 195


state 124

    (93) type -> INT .

    R_PAR           reduce using rule 93 (type -> INT .)


state 125

    (94) type -> FLOAT .

    R_PAR           reduce using rule 94 (type -> FLOAT .)


state 126

    (95) type -> CHAR .

    R_PAR           reduce using rule 95 (type -> CHAR .)


state 127

    (73) assign -> TVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 73 (assign -> TVAR ASSIGN bitwise SEMICOLON .)


state 128

    (97) declaration -> TVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 196


state 129

    (35) condition -> NOT condition .
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 35 (condition -> NOT condition .)
    R_PAR           reduce using rule 35 (condition -> NOT condition .)
    AND             shift and go to state 119
    OR              shift and go to state 120

  ! AND             [ reduce using rule 35 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 35 (condition -> NOT condition .) ]


state 130

    (83) bitwise -> var AND_B . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 197

state 131

    (84) bitwise -> var OR_B . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 198

state 132

    (85) bitwise -> var XOR_B . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 199

state 133

    (86) bitwise -> var SHIFT_L . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 200

state 134

    (87) bitwise -> var SHIFT_R . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 201

state 135

    (88) bitwise -> NOT_B TVAR .

    SEMICOLON       reduce using rule 88 (bitwise -> NOT_B TVAR .)


state 136

    (89) bitwise -> NOT_B AVAR .

    SEMICOLON       reduce using rule 89 (bitwise -> NOT_B AVAR .)


state 137

    (90) bitwise -> NOT_B VVAR .

    SEMICOLON       reduce using rule 90 (bitwise -> NOT_B VVAR .)


state 138

    (91) bitwise -> NOT_B SVAR .

    SEMICOLON       reduce using rule 91 (bitwise -> NOT_B SVAR .)


state 139

    (37) relational -> arithmetic EQUAL . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 202
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 140

    (38) relational -> arithmetic NOT_EQUAL . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 203
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 141

    (39) relational -> arithmetic GREATER . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 204
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 142

    (40) relational -> arithmetic LESS . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 205
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 143

    (41) relational -> arithmetic GREATER_EQUAL . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 206
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 144

    (42) relational -> arithmetic LESS_EQUAL . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 207
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 145

    (44) arithmetic -> arithmetic PLUS . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_BRACKET       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 208
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 146

    (45) arithmetic -> arithmetic MINUS . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_BRACKET       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 209
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 147

    (46) arithmetic -> arithmetic MULTIPLY . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_BRACKET       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 210
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 148

    (47) arithmetic -> arithmetic DIVIDE . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_BRACKET       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 211
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 149

    (48) arithmetic -> arithmetic REMAINDER . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)
    R_BRACKET       reduce using rule 60 (array_access -> .)
    R_PAR           reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 212
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 150

    (77) assign -> TVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (103) declaration -> TVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 213
    SEMICOLON       shift and go to state 214


state 151

    (62) assign -> AVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 62 (assign -> AVAR ASSIGN condition SEMICOLON .)


state 152

    (66) assign -> AVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 66 (assign -> AVAR ASSIGN conversion SEMICOLON .)


state 153

    (70) assign -> AVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 215


state 154

    (74) assign -> AVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 74 (assign -> AVAR ASSIGN bitwise SEMICOLON .)


state 155

    (98) declaration -> AVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 216


state 156

    (78) assign -> AVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (104) declaration -> AVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 217
    SEMICOLON       shift and go to state 218


state 157

    (63) assign -> VVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 63 (assign -> VVAR ASSIGN condition SEMICOLON .)


state 158

    (67) assign -> VVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 67 (assign -> VVAR ASSIGN conversion SEMICOLON .)


state 159

    (71) assign -> VVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 219


state 160

    (75) assign -> VVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 75 (assign -> VVAR ASSIGN bitwise SEMICOLON .)


state 161

    (99) declaration -> VVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 220


state 162

    (79) assign -> VVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (105) declaration -> VVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 221
    SEMICOLON       shift and go to state 222


state 163

    (64) assign -> SVAR ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    IF              reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)
    $end            reduce using rule 64 (assign -> SVAR ASSIGN condition SEMICOLON .)


state 164

    (68) assign -> SVAR ASSIGN conversion SEMICOLON .

    GOTO            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    UNSET           reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    PRINT           reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    EXIT            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    NAME            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    IF              reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    TVAR            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    AVAR            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    VVAR            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    SVAR            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    SPVAR           reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    RAVAR           reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)
    $end            reduce using rule 68 (assign -> SVAR ASSIGN conversion SEMICOLON .)


state 165

    (72) assign -> SVAR ASSIGN READ L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 223


state 166

    (76) assign -> SVAR ASSIGN bitwise SEMICOLON .

    GOTO            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    UNSET           reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    PRINT           reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    EXIT            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    NAME            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    IF              reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    TVAR            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    AVAR            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    VVAR            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    SVAR            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    SPVAR           reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    RAVAR           reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)
    $end            reduce using rule 76 (assign -> SVAR ASSIGN bitwise SEMICOLON .)


state 167

    (100) declaration -> SVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 224


state 168

    (80) assign -> SVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (106) declaration -> SVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 225
    SEMICOLON       shift and go to state 226


state 169

    (81) assign -> SPVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (107) declaration -> SPVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 227
    SEMICOLON       shift and go to state 228


state 170

    (101) declaration -> SPVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 229


state 171

    (82) assign -> RAVAR L_BRACKET arithmetic R_BRACKET . ASSIGN condition SEMICOLON
    (108) declaration -> RAVAR L_BRACKET arithmetic R_BRACKET . SEMICOLON

    ASSIGN          shift and go to state 230
    SEMICOLON       shift and go to state 231


state 172

    (102) declaration -> RAVAR ASSIGN ARRAY L_PAR . R_PAR SEMICOLON

    R_PAR           shift and go to state 232


state 173

    (18) print -> PRINT L_PAR TVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 233


state 174

    (24) print -> PRINT L_PAR TVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 234
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 175

    (19) print -> PRINT L_PAR AVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 235


state 176

    (25) print -> PRINT L_PAR AVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 236
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 177

    (20) print -> PRINT L_PAR VVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 237


state 178

    (26) print -> PRINT L_PAR VVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 238
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 179

    (21) print -> PRINT L_PAR SVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 239


state 180

    (27) print -> PRINT L_PAR SVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 240
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 181

    (22) print -> PRINT L_PAR SPVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 241


state 182

    (28) print -> PRINT L_PAR SPVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 242
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 183

    (23) print -> PRINT L_PAR RAVAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 243


state 184

    (29) print -> PRINT L_PAR RAVAR L_BRACKET . arithmetic R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    R_BRACKET       reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 244
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 185

    (32) if -> IF L_PAR condition R_PAR . GOTO NAME SEMICOLON

    GOTO            shift and go to state 245


state 186

    (12) unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    IF              reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)
    $end            reduce using rule 12 (unset -> UNSET L_PAR TVAR R_PAR SEMICOLON .)


state 187

    (13) unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    IF              reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)
    $end            reduce using rule 13 (unset -> UNSET L_PAR AVAR R_PAR SEMICOLON .)


state 188

    (14) unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    IF              reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)
    $end            reduce using rule 14 (unset -> UNSET L_PAR VVAR R_PAR SEMICOLON .)


state 189

    (15) unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    IF              reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)
    $end            reduce using rule 15 (unset -> UNSET L_PAR SVAR R_PAR SEMICOLON .)


state 190

    (16) unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    IF              reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)
    $end            reduce using rule 16 (unset -> UNSET L_PAR SPVAR R_PAR SEMICOLON .)


state 191

    (17) unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    IF              reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)
    $end            reduce using rule 17 (unset -> UNSET L_PAR RAVAR R_PAR SEMICOLON .)


state 192

    (33) condition -> condition AND condition .
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       reduce using rule 33 (condition -> condition AND condition .)
    AND             reduce using rule 33 (condition -> condition AND condition .)
    OR              reduce using rule 33 (condition -> condition AND condition .)
    R_PAR           reduce using rule 33 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 193

    (34) condition -> condition OR condition .
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       reduce using rule 34 (condition -> condition OR condition .)
    OR              reduce using rule 34 (condition -> condition OR condition .)
    R_PAR           reduce using rule 34 (condition -> condition OR condition .)
    AND             shift and go to state 119

  ! AND             [ reduce using rule 34 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 120 ]


state 194

    (69) assign -> TVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 246


state 195

    (92) conversion -> L_PAR type R_PAR . var
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR

    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76

    var                            shift and go to state 247

state 196

    (97) declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 248


state 197

    (83) bitwise -> var AND_B var .

    SEMICOLON       reduce using rule 83 (bitwise -> var AND_B var .)


state 198

    (84) bitwise -> var OR_B var .

    SEMICOLON       reduce using rule 84 (bitwise -> var OR_B var .)


state 199

    (85) bitwise -> var XOR_B var .

    SEMICOLON       reduce using rule 85 (bitwise -> var XOR_B var .)


state 200

    (86) bitwise -> var SHIFT_L var .

    SEMICOLON       reduce using rule 86 (bitwise -> var SHIFT_L var .)


state 201

    (87) bitwise -> var SHIFT_R var .

    SEMICOLON       reduce using rule 87 (bitwise -> var SHIFT_R var .)


state 202

    (37) relational -> arithmetic EQUAL arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 37 (relational -> arithmetic EQUAL arithmetic .)
    AND             reduce using rule 37 (relational -> arithmetic EQUAL arithmetic .)
    OR              reduce using rule 37 (relational -> arithmetic EQUAL arithmetic .)
    R_PAR           reduce using rule 37 (relational -> arithmetic EQUAL arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 203

    (38) relational -> arithmetic NOT_EQUAL arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 38 (relational -> arithmetic NOT_EQUAL arithmetic .)
    AND             reduce using rule 38 (relational -> arithmetic NOT_EQUAL arithmetic .)
    OR              reduce using rule 38 (relational -> arithmetic NOT_EQUAL arithmetic .)
    R_PAR           reduce using rule 38 (relational -> arithmetic NOT_EQUAL arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 204

    (39) relational -> arithmetic GREATER arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 39 (relational -> arithmetic GREATER arithmetic .)
    AND             reduce using rule 39 (relational -> arithmetic GREATER arithmetic .)
    OR              reduce using rule 39 (relational -> arithmetic GREATER arithmetic .)
    R_PAR           reduce using rule 39 (relational -> arithmetic GREATER arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 205

    (40) relational -> arithmetic LESS arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 40 (relational -> arithmetic LESS arithmetic .)
    AND             reduce using rule 40 (relational -> arithmetic LESS arithmetic .)
    OR              reduce using rule 40 (relational -> arithmetic LESS arithmetic .)
    R_PAR           reduce using rule 40 (relational -> arithmetic LESS arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 206

    (41) relational -> arithmetic GREATER_EQUAL arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 41 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    AND             reduce using rule 41 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    OR              reduce using rule 41 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    R_PAR           reduce using rule 41 (relational -> arithmetic GREATER_EQUAL arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 207

    (42) relational -> arithmetic LESS_EQUAL arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    SEMICOLON       reduce using rule 42 (relational -> arithmetic LESS_EQUAL arithmetic .)
    AND             reduce using rule 42 (relational -> arithmetic LESS_EQUAL arithmetic .)
    OR              reduce using rule 42 (relational -> arithmetic LESS_EQUAL arithmetic .)
    R_PAR           reduce using rule 42 (relational -> arithmetic LESS_EQUAL arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 208

    (44) arithmetic -> arithmetic PLUS arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    NOT_EQUAL       reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    GREATER         reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    LESS            reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    GREATER_EQUAL   reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    LESS_EQUAL      reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    PLUS            reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    MINUS           reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    REMAINDER       reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    SEMICOLON       reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    AND             reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    OR              reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    R_BRACKET       reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    R_PAR           reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .)
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148

  ! MULTIPLY        [ reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .) ]
  ! DIVIDE          [ reduce using rule 44 (arithmetic -> arithmetic PLUS arithmetic .) ]
  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! REMAINDER       [ shift and go to state 149 ]


state 209

    (45) arithmetic -> arithmetic MINUS arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    NOT_EQUAL       reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    GREATER         reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    LESS            reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    GREATER_EQUAL   reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    LESS_EQUAL      reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    PLUS            reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    MINUS           reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    REMAINDER       reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    SEMICOLON       reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    AND             reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    OR              reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    R_BRACKET       reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    R_PAR           reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .)
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148

  ! MULTIPLY        [ reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .) ]
  ! DIVIDE          [ reduce using rule 45 (arithmetic -> arithmetic MINUS arithmetic .) ]
  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! REMAINDER       [ shift and go to state 149 ]


state 210

    (46) arithmetic -> arithmetic MULTIPLY arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    NOT_EQUAL       reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    GREATER         reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    LESS            reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    GREATER_EQUAL   reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    LESS_EQUAL      reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    PLUS            reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    MINUS           reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    MULTIPLY        reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    DIVIDE          reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    REMAINDER       reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    SEMICOLON       reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    AND             reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    OR              reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    R_BRACKET       reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)
    R_PAR           reduce using rule 46 (arithmetic -> arithmetic MULTIPLY arithmetic .)

  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! MULTIPLY        [ shift and go to state 147 ]
  ! DIVIDE          [ shift and go to state 148 ]
  ! REMAINDER       [ shift and go to state 149 ]


state 211

    (47) arithmetic -> arithmetic DIVIDE arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    EQUAL           reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    NOT_EQUAL       reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    GREATER         reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    LESS            reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    GREATER_EQUAL   reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    LESS_EQUAL      reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    PLUS            reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    MINUS           reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    MULTIPLY        reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    DIVIDE          reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    REMAINDER       reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    SEMICOLON       reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    AND             reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    OR              reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    R_BRACKET       reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)
    R_PAR           reduce using rule 47 (arithmetic -> arithmetic DIVIDE arithmetic .)

  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! MULTIPLY        [ shift and go to state 147 ]
  ! DIVIDE          [ shift and go to state 148 ]
  ! REMAINDER       [ shift and go to state 149 ]


state 212

    (48) arithmetic -> arithmetic REMAINDER arithmetic .
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
    EQUAL           reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    NOT_EQUAL       reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    GREATER         reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    LESS            reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    GREATER_EQUAL   reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    LESS_EQUAL      reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    SEMICOLON       reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    AND             reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    OR              reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    R_BRACKET       reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    R_PAR           reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149

  ! PLUS            [ reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! MINUS           [ reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! MULTIPLY        [ reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! DIVIDE          [ reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .) ]
  ! REMAINDER       [ reduce using rule 48 (arithmetic -> arithmetic REMAINDER arithmetic .) ]


state 213

    (77) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 249
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 214

    (103) declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 103 (declaration -> TVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 215

    (70) assign -> AVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 250


state 216

    (98) declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 251


state 217

    (78) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 252
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 218

    (104) declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 104 (declaration -> AVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 219

    (71) assign -> VVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 253


state 220

    (99) declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 254


state 221

    (79) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 255
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 222

    (105) declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 105 (declaration -> VVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 223

    (72) assign -> SVAR ASSIGN READ L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 256


state 224

    (100) declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 257


state 225

    (80) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 258
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 226

    (106) declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 106 (declaration -> SVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 227

    (81) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 259
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 228

    (107) declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 107 (declaration -> SPVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 229

    (101) declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 260


state 230

    (82) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN . condition SEMICOLON
    (33) condition -> . condition AND condition
    (34) condition -> . condition OR condition
    (35) condition -> . NOT condition
    (36) condition -> . relational
    (37) relational -> . arithmetic EQUAL arithmetic
    (38) relational -> . arithmetic NOT_EQUAL arithmetic
    (39) relational -> . arithmetic GREATER arithmetic
    (40) relational -> . arithmetic LESS arithmetic
    (41) relational -> . arithmetic GREATER_EQUAL arithmetic
    (42) relational -> . arithmetic LESS_EQUAL arithmetic
    (43) relational -> . arithmetic
    (44) arithmetic -> . arithmetic PLUS arithmetic
    (45) arithmetic -> . arithmetic MINUS arithmetic
    (46) arithmetic -> . arithmetic MULTIPLY arithmetic
    (47) arithmetic -> . arithmetic DIVIDE arithmetic
    (48) arithmetic -> . arithmetic REMAINDER arithmetic
    (49) arithmetic -> . INTEGER
    (50) arithmetic -> . DECIMAL
    (51) arithmetic -> . STRING
    (52) arithmetic -> . var
    (53) arithmetic -> . array_access
    (54) var -> . TVAR
    (55) var -> . AVAR
    (56) var -> . VVAR
    (57) var -> . SVAR
    (58) var -> . RAVAR
    (59) var -> . SPVAR
    (60) array_access -> .

    NOT             shift and go to state 67
    INTEGER         shift and go to state 77
    DECIMAL         shift and go to state 78
    STRING          shift and go to state 79
    TVAR            shift and go to state 60
    AVAR            shift and go to state 71
    VVAR            shift and go to state 72
    SVAR            shift and go to state 73
    RAVAR           shift and go to state 75
    SPVAR           shift and go to state 76
    EQUAL           reduce using rule 60 (array_access -> .)
    NOT_EQUAL       reduce using rule 60 (array_access -> .)
    GREATER         reduce using rule 60 (array_access -> .)
    LESS            reduce using rule 60 (array_access -> .)
    GREATER_EQUAL   reduce using rule 60 (array_access -> .)
    LESS_EQUAL      reduce using rule 60 (array_access -> .)
    PLUS            reduce using rule 60 (array_access -> .)
    MINUS           reduce using rule 60 (array_access -> .)
    MULTIPLY        reduce using rule 60 (array_access -> .)
    DIVIDE          reduce using rule 60 (array_access -> .)
    REMAINDER       reduce using rule 60 (array_access -> .)
    SEMICOLON       reduce using rule 60 (array_access -> .)
    AND             reduce using rule 60 (array_access -> .)
    OR              reduce using rule 60 (array_access -> .)

    arithmetic                     shift and go to state 74
    condition                      shift and go to state 261
    relational                     shift and go to state 68
    var                            shift and go to state 82
    array_access                   shift and go to state 80

state 231

    (108) declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .

    GOTO            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    UNSET           reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    PRINT           reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    EXIT            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    NAME            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    IF              reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    TVAR            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    AVAR            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    VVAR            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SVAR            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    SPVAR           reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    RAVAR           reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)
    $end            reduce using rule 108 (declaration -> RAVAR L_BRACKET arithmetic R_BRACKET SEMICOLON .)


state 232

    (102) declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 262


state 233

    (18) print -> PRINT L_PAR TVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    IF              reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)
    $end            reduce using rule 18 (print -> PRINT L_PAR TVAR R_PAR SEMICOLON .)


state 234

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 263
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 235

    (19) print -> PRINT L_PAR AVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    IF              reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)
    $end            reduce using rule 19 (print -> PRINT L_PAR AVAR R_PAR SEMICOLON .)


state 236

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 264
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 237

    (20) print -> PRINT L_PAR VVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    IF              reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)
    $end            reduce using rule 20 (print -> PRINT L_PAR VVAR R_PAR SEMICOLON .)


state 238

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 265
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 239

    (21) print -> PRINT L_PAR SVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    IF              reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)
    $end            reduce using rule 21 (print -> PRINT L_PAR SVAR R_PAR SEMICOLON .)


state 240

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 266
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 241

    (22) print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    IF              reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)
    $end            reduce using rule 22 (print -> PRINT L_PAR SPVAR R_PAR SEMICOLON .)


state 242

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 267
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 243

    (23) print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .

    GOTO            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    NAME            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    IF              reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)
    $end            reduce using rule 23 (print -> PRINT L_PAR RAVAR R_PAR SEMICOLON .)


state 244

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic . R_BRACKET R_PAR SEMICOLON
    (44) arithmetic -> arithmetic . PLUS arithmetic
    (45) arithmetic -> arithmetic . MINUS arithmetic
    (46) arithmetic -> arithmetic . MULTIPLY arithmetic
    (47) arithmetic -> arithmetic . DIVIDE arithmetic
    (48) arithmetic -> arithmetic . REMAINDER arithmetic

    R_BRACKET       shift and go to state 268
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MULTIPLY        shift and go to state 147
    DIVIDE          shift and go to state 148
    REMAINDER       shift and go to state 149


state 245

    (32) if -> IF L_PAR condition R_PAR GOTO . NAME SEMICOLON

    NAME            shift and go to state 269


state 246

    (69) assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 69 (assign -> TVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 247

    (92) conversion -> L_PAR type R_PAR var .

    SEMICOLON       reduce using rule 92 (conversion -> L_PAR type R_PAR var .)


state 248

    (97) declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 97 (declaration -> TVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 249

    (77) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 270
    AND             shift and go to state 119
    OR              shift and go to state 120


state 250

    (70) assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 70 (assign -> AVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 251

    (98) declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 98 (declaration -> AVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 252

    (78) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 271
    AND             shift and go to state 119
    OR              shift and go to state 120


state 253

    (71) assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 71 (assign -> VVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 254

    (99) declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 99 (declaration -> VVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 255

    (79) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 272
    AND             shift and go to state 119
    OR              shift and go to state 120


state 256

    (72) assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 72 (assign -> SVAR ASSIGN READ L_PAR R_PAR SEMICOLON .)


state 257

    (100) declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 100 (declaration -> SVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 258

    (80) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 273
    AND             shift and go to state 119
    OR              shift and go to state 120


state 259

    (81) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 274
    AND             shift and go to state 119
    OR              shift and go to state 120


state 260

    (101) declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 101 (declaration -> SPVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 261

    (82) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition . SEMICOLON
    (33) condition -> condition . AND condition
    (34) condition -> condition . OR condition

    SEMICOLON       shift and go to state 275
    AND             shift and go to state 119
    OR              shift and go to state 120


state 262

    (102) declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .

    GOTO            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    UNSET           reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    PRINT           reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    EXIT            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    NAME            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    IF              reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    TVAR            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    AVAR            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    VVAR            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SVAR            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    SPVAR           reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    RAVAR           reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)
    $end            reduce using rule 102 (declaration -> RAVAR ASSIGN ARRAY L_PAR R_PAR SEMICOLON .)


state 263

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 276


state 264

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 277


state 265

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 278


state 266

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 279


state 267

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 280


state 268

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET . R_PAR SEMICOLON

    R_PAR           shift and go to state 281


state 269

    (32) if -> IF L_PAR condition R_PAR GOTO NAME . SEMICOLON

    SEMICOLON       shift and go to state 282


state 270

    (77) assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 77 (assign -> TVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 271

    (78) assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 78 (assign -> AVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 272

    (79) assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 79 (assign -> VVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 273

    (80) assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 80 (assign -> SVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 274

    (81) assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 81 (assign -> SPVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 275

    (82) assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .

    GOTO            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    UNSET           reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    PRINT           reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    EXIT            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    NAME            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    IF              reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    TVAR            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    AVAR            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    VVAR            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SVAR            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    SPVAR           reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    RAVAR           reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)
    $end            reduce using rule 82 (assign -> RAVAR L_BRACKET arithmetic R_BRACKET ASSIGN condition SEMICOLON .)


state 276

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 283


state 277

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 284


state 278

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 285


state 279

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 286


state 280

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 287


state 281

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 288


state 282

    (32) if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .

    GOTO            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    UNSET           reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    PRINT           reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    EXIT            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    NAME            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    IF              reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    TVAR            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    AVAR            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    VVAR            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    SVAR            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    SPVAR           reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    RAVAR           reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)
    $end            reduce using rule 32 (if -> IF L_PAR condition R_PAR GOTO NAME SEMICOLON .)


state 283

    (24) print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 24 (print -> PRINT L_PAR TVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 284

    (25) print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 25 (print -> PRINT L_PAR AVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 285

    (26) print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 26 (print -> PRINT L_PAR VVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 286

    (27) print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 27 (print -> PRINT L_PAR SVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 287

    (28) print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 28 (print -> PRINT L_PAR SPVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)


state 288

    (29) print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .

    GOTO            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    UNSET           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    PRINT           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    EXIT            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    NAME            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    IF              reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    TVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    AVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    VVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SVAR            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    SPVAR           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    RAVAR           reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)
    $end            reduce using rule 29 (print -> PRINT L_PAR RAVAR L_BRACKET arithmetic R_BRACKET R_PAR SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 212 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 212 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 212 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 212 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 212 resolved as shift
